{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"installation/","text":"This is only a placeholder The content of this page can be found under: https://github.com/laminas/documentation-theme/blob/master/theme/pages/installation.html","title":"Installation"},{"location":"installation/#this-is-only-a-placeholder","text":"The content of this page can be found under: https://github.com/laminas/documentation-theme/blob/master/theme/pages/installation.html","title":"This is only a placeholder"},{"location":"introduction/","text":"Introduction Translation Laminas\\I18n comes with a complete translation suite which supports all major formats and includes popular features like plural translations and text domains. The Translator component is mostly dependency free, except for the fallback to a default locale, where it relies on the intl PHP extension. The translator itself is initialized without any parameters, as any configuration to it is optional. A translator without any translations will actually do nothing but just return the given message IDs. Filters and Validators The Laminas\\I18n component also provides a set of filters for normalizing and formatting. The component also provides a set of validators for validating localized data. View Helpers The Laminas\\I18n component provides also a set of view helpers for formatting dates, times, numbers, currencies, and translating messages. Based on PHP's intl extension The intl extension is a wrapper for the ICU library, which provides a lot of internationalization functions. The intl extension is a standard PHP extension, and is required for the Laminas\\I18n component to work. The intl functions are used for locale detection, filtering and validating localized data, formatting localized data and more. These functions are used in: Translator Filters Validators View Helpers","title":"Introduction"},{"location":"introduction/#introduction","text":"","title":"Introduction"},{"location":"introduction/#translation","text":"Laminas\\I18n comes with a complete translation suite which supports all major formats and includes popular features like plural translations and text domains. The Translator component is mostly dependency free, except for the fallback to a default locale, where it relies on the intl PHP extension. The translator itself is initialized without any parameters, as any configuration to it is optional. A translator without any translations will actually do nothing but just return the given message IDs.","title":"Translation"},{"location":"introduction/#filters-and-validators","text":"The Laminas\\I18n component also provides a set of filters for normalizing and formatting. The component also provides a set of validators for validating localized data.","title":"Filters and Validators"},{"location":"introduction/#view-helpers","text":"The Laminas\\I18n component provides also a set of view helpers for formatting dates, times, numbers, currencies, and translating messages.","title":"View Helpers"},{"location":"introduction/#based-on-phps-intl-extension","text":"The intl extension is a wrapper for the ICU library, which provides a lot of internationalization functions. The intl extension is a standard PHP extension, and is required for the Laminas\\I18n component to work. The intl functions are used for locale detection, filtering and validating localized data, formatting localized data and more. These functions are used in: Translator Filters Validators View Helpers","title":"Based on PHP's intl extension"},{"location":"translation/","text":"Translation laminas-i18n comes with a complete translation suite supporting all major formats and including popular features such as plural translations and text domains. The Translator subcomponent is mostly dependency free, except for the fallback to a default locale, where it relies on the PHP's intl extension. The translator itself is initialized without any parameters, as any configuration to it is optional. A translator without any translations will do nothing but return all messages verbatim. Installation Requirements The translation support of laminas-i18n depends on the laminas-servicemanager component, so be sure to have it installed before getting started: $ composer require laminas/laminas-servicemanager Adding translations Two options exist for adding translations to the translator: Add every translation file individually; use this for translation formats that store multiple locales in the same file. Add translation files based on a pattern; use this for formats that use one file per locale. To add a single file to the translator, use the addTranslationFile() method: use Laminas\\I18n\\Translator\\Translator; $translator = new Translator(); $translator-&gt;addTranslationFile($type, $filename, $textDomain, $locale); where the arguments are: $type : the name of the format loader to use; see the next section for details. $filename : the file containing translations. $textDomain : a \"category\" name for translations. If this is omitted, it defaults to \"default\". Use text domains to segregate translations by context. $locale : the language strings are translated from; this argument is only required for formats which contain translations for single locales. When storing one locale per file, you should specify those files via a pattern. This allows you to add new translations to the file system, without touching your code. Patterns are added with the addTranslationFilePattern() method: use Laminas\\I18n\\Translator\\Translator; $translator = new Translator(); $translator-&gt;addTranslationFilePattern($type, $baseDir, $pattern, $textDomain); where the arguments are roughly the same as for addTranslationFile() , with a few differences: $baseDir is a directory containing translation files. $pattern is an sprintf() -formatted string describing a pattern for locating files under $baseDir . The $pattern should contain a substitution character for the $locale â€” which is omitted from the addTranslationFilePattern() call, but passed whenever a translation is requested. Use either %s or %1$s in the $pattern as a placeholder for the locale. As an example, if your translation files are located in /var/messages/&lt;LOCALE&gt;/messages.mo , your pattern would be /var/messages/%s/messages.mo . Supported formats The translator supports the following major translation formats: PHP arrays Gettext INI Additionally, you can use custom formats by implementing one or more of Laminas\\I18n\\Translator\\Loader\\FileLoaderInterface or Laminas\\I18n\\Translator\\Loader\\RemoteLoaderInterface , and registering your loader with the Translator instance's composed plugin manager. Installation Requirements The support of the INI translation format depends on the laminas-config component, so be sure to have it installed before getting started: $ composer require laminas/laminas-config Setting a locale By default, the translator will get the locale to use from ext/intl's Locale class. If you want to set an alternative locale explicitly, you can do so by passing it to the setLocale() method. When there is no translation for a specific message identifier in a locale, the message identifier itself will be returned by default. Alternately, you can set a fallback locale which is used to retrieve a fallback translation. To do so, pass it to the setFallbackLocale() method. Translating messages Translating messages is accomplished by calling the translate() method of the translator: $translator-&gt;translate($message, $textDomain, $locale); The message is the message identifier to translate. If it does not exist in the loader, or is empty, the original message ID will be returned. The text domain parameter is the one you specified when adding translations. If omitted, the \"default\" text domain will be used. The locale parameter will usually not be used in this context, as by default the locale is taken from the locale set in the translator. To translate plural messages, you can use the translatePlural() method. It works similarly to translate() , but instead of a single message, it takes a singular value, a plural value, and an additional integer number on which the returned plural form is based: $translator-&gt;translatePlural($singular, $plural, $number, $textDomain, $locale); Plural translations are only available if the underlying format supports the translation of plural messages and plural rule definitions.","title":"Translation"},{"location":"translation/#translation","text":"laminas-i18n comes with a complete translation suite supporting all major formats and including popular features such as plural translations and text domains. The Translator subcomponent is mostly dependency free, except for the fallback to a default locale, where it relies on the PHP's intl extension. The translator itself is initialized without any parameters, as any configuration to it is optional. A translator without any translations will do nothing but return all messages verbatim. Installation Requirements The translation support of laminas-i18n depends on the laminas-servicemanager component, so be sure to have it installed before getting started: $ composer require laminas/laminas-servicemanager","title":"Translation"},{"location":"translation/#adding-translations","text":"Two options exist for adding translations to the translator: Add every translation file individually; use this for translation formats that store multiple locales in the same file. Add translation files based on a pattern; use this for formats that use one file per locale. To add a single file to the translator, use the addTranslationFile() method: use Laminas\\I18n\\Translator\\Translator; $translator = new Translator(); $translator-&gt;addTranslationFile($type, $filename, $textDomain, $locale); where the arguments are: $type : the name of the format loader to use; see the next section for details. $filename : the file containing translations. $textDomain : a \"category\" name for translations. If this is omitted, it defaults to \"default\". Use text domains to segregate translations by context. $locale : the language strings are translated from; this argument is only required for formats which contain translations for single locales. When storing one locale per file, you should specify those files via a pattern. This allows you to add new translations to the file system, without touching your code. Patterns are added with the addTranslationFilePattern() method: use Laminas\\I18n\\Translator\\Translator; $translator = new Translator(); $translator-&gt;addTranslationFilePattern($type, $baseDir, $pattern, $textDomain); where the arguments are roughly the same as for addTranslationFile() , with a few differences: $baseDir is a directory containing translation files. $pattern is an sprintf() -formatted string describing a pattern for locating files under $baseDir . The $pattern should contain a substitution character for the $locale â€” which is omitted from the addTranslationFilePattern() call, but passed whenever a translation is requested. Use either %s or %1$s in the $pattern as a placeholder for the locale. As an example, if your translation files are located in /var/messages/&lt;LOCALE&gt;/messages.mo , your pattern would be /var/messages/%s/messages.mo .","title":"Adding translations"},{"location":"translation/#supported-formats","text":"The translator supports the following major translation formats: PHP arrays Gettext INI Additionally, you can use custom formats by implementing one or more of Laminas\\I18n\\Translator\\Loader\\FileLoaderInterface or Laminas\\I18n\\Translator\\Loader\\RemoteLoaderInterface , and registering your loader with the Translator instance's composed plugin manager. Installation Requirements The support of the INI translation format depends on the laminas-config component, so be sure to have it installed before getting started: $ composer require laminas/laminas-config","title":"Supported formats"},{"location":"translation/#setting-a-locale","text":"By default, the translator will get the locale to use from ext/intl's Locale class. If you want to set an alternative locale explicitly, you can do so by passing it to the setLocale() method. When there is no translation for a specific message identifier in a locale, the message identifier itself will be returned by default. Alternately, you can set a fallback locale which is used to retrieve a fallback translation. To do so, pass it to the setFallbackLocale() method.","title":"Setting a locale"},{"location":"translation/#translating-messages","text":"Translating messages is accomplished by calling the translate() method of the translator: $translator-&gt;translate($message, $textDomain, $locale); The message is the message identifier to translate. If it does not exist in the loader, or is empty, the original message ID will be returned. The text domain parameter is the one you specified when adding translations. If omitted, the \"default\" text domain will be used. The locale parameter will usually not be used in this context, as by default the locale is taken from the locale set in the translator. To translate plural messages, you can use the translatePlural() method. It works similarly to translate() , but instead of a single message, it takes a singular value, a plural value, and an additional integer number on which the returned plural form is based: $translator-&gt;translatePlural($singular, $plural, $number, $textDomain, $locale); Plural translations are only available if the underlying format supports the translation of plural messages and plural rule definitions.","title":"Translating messages"},{"location":"application-integration/stand-alone/","text":"Stand-Alone All filters, validators, view-helpers and the translator of laminas-i18n can also be used stand-alone. Translator Setup Create a file for the translation messages. For example languages/de_DE.php : return [ 'car' =&gt; 'Auto', 'train' =&gt; 'Zug', ]; Create the translator instance and add the translation file. $translator = new Laminas\\I18n\\Translator\\Translator(); $translator-&gt;addTranslationFile( Laminas\\I18n\\Translator\\Loader\\PhpArray::class, __DIR__ . '/languages/de_DE.php', 'default', 'de_DE' ); Translate Messages $translator-&gt;setLocale('de_DE'); echo $translator-&gt;translate('car'); // Auto echo $translator-&gt;translate('train'); // Zug Filters Each filter can be used directly. $filter = new Laminas\\I18n\\Filter\\Alnum(); echo $filter-&gt;filter('This is (my) content: 123'); // \"Thisismycontent123\" Using Filter Plugin Manager Register all standard filters of laminas-i18n in the filter-plugin-manager: $filterManager = new Laminas\\Filter\\FilterPluginManager( new Laminas\\ServiceManager\\ServiceManager() ); $filterManager-&gt;configure( (new Laminas\\I18n\\ConfigProvider())-&gt;getFilterConfig() ); Get a filter: /** @var Laminas\\I18n\\Filter\\Alnum $filter */ $filter = $filterManager-&gt;get(Laminas\\I18n\\Filter\\Alnum::class); Validators Each validator can be used directly. $validator = new Laminas\\I18n\\Validator\\Alnum(); $result = $validator-&gt;isValid('Abcd12')); // true Using Validator Plugin Manager Register all standard validators of laminas-i18n in the validator-plugin-manager: $validatorManager = new Laminas\\Validator\\ValidatorPluginManager( new Laminas\\ServiceManager\\ServiceManager() ); $validatorManager-&gt;configure( (new Laminas\\I18n\\ConfigProvider())-&gt;getValidatorConfig() ); Get a validator: /** @var Laminas\\I18n\\Validator\\Alnum $validator */ $validator = $validatorManager-&gt;get(Laminas\\I18n\\Validator\\Alnum::class); View Helpers Setup laminas-view Create the renderer: $renderer = new Laminas\\View\\Renderer\\PhpRenderer(); Register all standard view-helpers of laminas-i18n in the helper-plugin-manager: $renderer-&gt;getHelperPluginManager()-&gt;configure( (new Laminas\\I18n\\ConfigProvider())-&gt;getViewHelperConfig() ); Using Helper echo $renderer-&gt;currencyFormat(1234.56, 'USD', null, 'en_US'); // \"$1,234.56\"","title":"Stand-Alone"},{"location":"application-integration/stand-alone/#stand-alone","text":"All filters, validators, view-helpers and the translator of laminas-i18n can also be used stand-alone.","title":"Stand-Alone"},{"location":"application-integration/stand-alone/#translator","text":"","title":"Translator"},{"location":"application-integration/stand-alone/#filters","text":"Each filter can be used directly. $filter = new Laminas\\I18n\\Filter\\Alnum(); echo $filter-&gt;filter('This is (my) content: 123'); // \"Thisismycontent123\"","title":"Filters"},{"location":"application-integration/stand-alone/#validators","text":"Each validator can be used directly. $validator = new Laminas\\I18n\\Validator\\Alnum(); $result = $validator-&gt;isValid('Abcd12')); // true","title":"Validators"},{"location":"application-integration/stand-alone/#view-helpers","text":"","title":"View Helpers"},{"location":"filters/alnum/","text":"Alnum The Alnum filter can be used to return only alphabetic characters and digits in the unicode \"letter\" and \"number\" categories, respectively. All other characters are suppressed. Basic Usage $filter = new Laminas\\I18n\\Filter\\Alnum(); echo $filter-&gt;filter('This is (my) content: 123'); // \"Thisismycontent123\" By default, if no locale is provided, Alnum will use the system locale provided by PHP's Locale class and the getDefault() method. Using Whitespace To allow whitespace characters ( \\s ) on filtering set the option to true ; otherwise they are suppressed. Constructor Usage $filter = new Laminas\\I18n\\Filter\\Alnum(true); echo $filter-&gt;filter('This is (my) content: 123'); // \"This is my content 123\" Setter Usage $filter = new Laminas\\I18n\\Filter\\Alnum(); $filter-&gt;setAllowWhiteSpace(true); echo $filter-&gt;filter('This is (my) content: 123'); // \"This is my content 123\" Get Current Value To get the current value of this option, use the getAllowWhiteSpace() method. $filter = new Laminas\\I18n\\Filter\\Alnum(true); $result = $filter-&gt;getAllowWhiteSpace(); // true Default Value The default value of this option is false that means whitespace characters are suppressed. Using Locale The locale string used in identifying the characters to filter (locale name, e.g. en_US ). Constructor Usage $filter = new Laminas\\I18n\\Filter\\Alnum(null, 'en_US'); echo $filter-&gt;filter('This is (my) content: 123'); // \"Thisismycontent123\" Setter Usage $filter = new Laminas\\I18n\\Filter\\Alnum(); $filter-&gt;setLocale('en_US'); echo $filter-&gt;filter('This is (my) content: 123'); // \"Thisismycontent123\" Locale Class Usage Locale::setDefault('en_US'); $filter = new Laminas\\I18n\\Filter\\Alnum(); echo $filter-&gt;filter('This is (my) content: 123'); // \"Thisismycontent123\" Get Current Value To get the current value of this option, use the getLocale() method. $filter = new Laminas\\I18n\\Filter\\Alnum(null, 'en_US'); echo $filter-&gt;getLocale(); // 'en_US' Default Value By default, if no locale is provided, Alnum will use the system locale provided by PHP's Locale::getDefault() . Supported Languages Alnum works for most languages, except Korean , Japanese , and Chinese . Within these languages, the English alphabet is used instead of the characters from these languages. The language itself is detected using PHP's Locale class.","title":"Alnum"},{"location":"filters/alnum/#alnum","text":"The Alnum filter can be used to return only alphabetic characters and digits in the unicode \"letter\" and \"number\" categories, respectively. All other characters are suppressed.","title":"Alnum"},{"location":"filters/alnum/#basic-usage","text":"$filter = new Laminas\\I18n\\Filter\\Alnum(); echo $filter-&gt;filter('This is (my) content: 123'); // \"Thisismycontent123\" By default, if no locale is provided, Alnum will use the system locale provided by PHP's Locale class and the getDefault() method.","title":"Basic Usage"},{"location":"filters/alnum/#using-whitespace","text":"To allow whitespace characters ( \\s ) on filtering set the option to true ; otherwise they are suppressed. Constructor Usage $filter = new Laminas\\I18n\\Filter\\Alnum(true); echo $filter-&gt;filter('This is (my) content: 123'); // \"This is my content 123\" Setter Usage $filter = new Laminas\\I18n\\Filter\\Alnum(); $filter-&gt;setAllowWhiteSpace(true); echo $filter-&gt;filter('This is (my) content: 123'); // \"This is my content 123\"","title":"Using Whitespace"},{"location":"filters/alnum/#using-locale","text":"The locale string used in identifying the characters to filter (locale name, e.g. en_US ). Constructor Usage $filter = new Laminas\\I18n\\Filter\\Alnum(null, 'en_US'); echo $filter-&gt;filter('This is (my) content: 123'); // \"Thisismycontent123\" Setter Usage $filter = new Laminas\\I18n\\Filter\\Alnum(); $filter-&gt;setLocale('en_US'); echo $filter-&gt;filter('This is (my) content: 123'); // \"Thisismycontent123\" Locale Class Usage Locale::setDefault('en_US'); $filter = new Laminas\\I18n\\Filter\\Alnum(); echo $filter-&gt;filter('This is (my) content: 123'); // \"Thisismycontent123\"","title":"Using Locale"},{"location":"filters/alnum/#supported-languages","text":"Alnum works for most languages, except Korean , Japanese , and Chinese . Within these languages, the English alphabet is used instead of the characters from these languages. The language itself is detected using PHP's Locale class.","title":"Supported Languages"},{"location":"filters/alpha/","text":"Alpha The Alpha filter can be used to return only alphabetic characters in the unicode \"letter\" category. All other characters are suppressed. Basic Usage $filter = new Laminas\\I18n\\Filter\\Alpha(); echo $filter-&gt;filter('This is (my) content: 123'); // \"Thisismycontent\" By default, if no locale is provided, Alpha will use the system locale provided by PHP's Locale class and the getDefault() method. Using Whitespace To allow whitespace characters ( \\s ) on filtering set the option to true ; otherwise they are suppressed. Constructor Usage $filter = new Laminas\\I18n\\Filter\\Alpha(true); echo $filter-&gt;filter('This is (my) content: 123'); // \"This is my content\" Setter Usage $filter = new Laminas\\I18n\\Filter\\Alpha(); $filter-&gt;setAllowWhiteSpace(true); echo $filter-&gt;filter('This is (my) content: 123'); // \"This is my content\" Get Current Value To get the current value of this option, use the getAllowWhiteSpace() method. $filter = new Laminas\\I18n\\Filter\\Alpha(true); $result = $filter-&gt;getAllowWhiteSpace(); // true Default Value The default value of this option is false that means whitespace characters are suppressed. Using Locale The locale string used in identifying the characters to filter (locale name, e.g. en_US ). Constructor Usage $filter = new Laminas\\I18n\\Filter\\Alpha(null, 'en_US'); echo $filter-&gt;filter('This is (my) content: 123'); // \"Thisismycontent\" Setter Usage $filter = new Laminas\\I18n\\Filter\\Alpha(); $filter-&gt;setLocale('en_US'); echo $filter-&gt;filter('This is (my) content: 123'); // \"Thisismycontent\" Locale Class Usage Locale::setDefault('en_US'); $filter = new Laminas\\I18n\\Filter\\Alpha(); echo $filter-&gt;filter('This is (my) content: 123'); // \"Thisismycontent\" Get Current Value To get the current value of this option, use the getLocale() method. $filter = new Laminas\\I18n\\Filter\\Alpha(null, 'en_US'); echo $filter-&gt;getLocale(); // 'en_US' Default Value By default, if no locale is provided, Alpha will use the system locale provided by PHP's Locale::getDefault() . Supported languages Alpha works for most languages, except Korean , Japanese , and Chinese . Within these languages, the English alphabet is used instead of the characters from these languages. The language itself is detected using PHP's Locale class.","title":"Alpha"},{"location":"filters/alpha/#alpha","text":"The Alpha filter can be used to return only alphabetic characters in the unicode \"letter\" category. All other characters are suppressed.","title":"Alpha"},{"location":"filters/alpha/#basic-usage","text":"$filter = new Laminas\\I18n\\Filter\\Alpha(); echo $filter-&gt;filter('This is (my) content: 123'); // \"Thisismycontent\" By default, if no locale is provided, Alpha will use the system locale provided by PHP's Locale class and the getDefault() method.","title":"Basic Usage"},{"location":"filters/alpha/#using-whitespace","text":"To allow whitespace characters ( \\s ) on filtering set the option to true ; otherwise they are suppressed. Constructor Usage $filter = new Laminas\\I18n\\Filter\\Alpha(true); echo $filter-&gt;filter('This is (my) content: 123'); // \"This is my content\" Setter Usage $filter = new Laminas\\I18n\\Filter\\Alpha(); $filter-&gt;setAllowWhiteSpace(true); echo $filter-&gt;filter('This is (my) content: 123'); // \"This is my content\"","title":"Using Whitespace"},{"location":"filters/alpha/#using-locale","text":"The locale string used in identifying the characters to filter (locale name, e.g. en_US ). Constructor Usage $filter = new Laminas\\I18n\\Filter\\Alpha(null, 'en_US'); echo $filter-&gt;filter('This is (my) content: 123'); // \"Thisismycontent\" Setter Usage $filter = new Laminas\\I18n\\Filter\\Alpha(); $filter-&gt;setLocale('en_US'); echo $filter-&gt;filter('This is (my) content: 123'); // \"Thisismycontent\" Locale Class Usage Locale::setDefault('en_US'); $filter = new Laminas\\I18n\\Filter\\Alpha(); echo $filter-&gt;filter('This is (my) content: 123'); // \"Thisismycontent\"","title":"Using Locale"},{"location":"filters/alpha/#supported-languages","text":"Alpha works for most languages, except Korean , Japanese , and Chinese . Within these languages, the English alphabet is used instead of the characters from these languages. The language itself is detected using PHP's Locale class.","title":"Supported languages"},{"location":"filters/introduction/","text":"Introduction laminas-i18n ships with a set of internationalization-related filters. Alnum Alpha NumberFormat NumberParse These filters are based on Laminas component for filtering and normalizing data and files: laminas-filter . The concept and the basic usage of the filters can be found in the documentation of laminas-filter . Installation Requirements The filtering support of laminas-i18n depends on the laminas-filter component, so be sure to have it installed before getting started: $ composer require laminas/laminas-filter","title":"Introduction"},{"location":"filters/introduction/#introduction","text":"laminas-i18n ships with a set of internationalization-related filters. Alnum Alpha NumberFormat NumberParse These filters are based on Laminas component for filtering and normalizing data and files: laminas-filter . The concept and the basic usage of the filters can be found in the documentation of laminas-filter . Installation Requirements The filtering support of laminas-i18n depends on the laminas-filter component, so be sure to have it installed before getting started: $ composer require laminas/laminas-filter","title":"Introduction"},{"location":"filters/number-format/","text":"NumberFormat The NumberFormat filter can be used to return locale-specific number and percentage strings . It extends the NumberParse filter , which acts as wrapper for the NumberFormatter class within PHP's internationalization extension ( ext/intl ). Basic Usage $filter = new Laminas\\I18n\\Filter\\NumberFormat(); echo $filter-&gt;filter(1234567.8912346); // \"1.234.567,891\" By default, if no locale is provided, NumberParse will use the system locale provided by PHP's Locale class and the getDefault() method. (The above example assumes that the environment locale is set to de_DE .) More Examples Format a number as percent: $filter = new Laminas\\I18n\\Filter\\NumberFormat('en_US', NumberFormatter::PERCENT); echo $filter-&gt;filter(0.80); // \"80%\" Format a number in a scientific format: $filter = new Laminas\\I18n\\Filter\\NumberFormat('fr_FR', NumberFormatter::SCIENTIFIC); echo $filter-&gt;filter(0.00123456789); // \"1,23456789E-3\" Inherited Options and Methods The NumberFormat filter extends the NumberParse filter and supports the same options and methods for locale, style, type and formatter. The descriptions with examples of usage can be found there: Using Locale Setting Style Setting Type Setting Custom NumberFormatter","title":"NumberFormat"},{"location":"filters/number-format/#numberformat","text":"The NumberFormat filter can be used to return locale-specific number and percentage strings . It extends the NumberParse filter , which acts as wrapper for the NumberFormatter class within PHP's internationalization extension ( ext/intl ).","title":"NumberFormat"},{"location":"filters/number-format/#basic-usage","text":"$filter = new Laminas\\I18n\\Filter\\NumberFormat(); echo $filter-&gt;filter(1234567.8912346); // \"1.234.567,891\" By default, if no locale is provided, NumberParse will use the system locale provided by PHP's Locale class and the getDefault() method. (The above example assumes that the environment locale is set to de_DE .)","title":"Basic Usage"},{"location":"filters/number-format/#inherited-options-and-methods","text":"The NumberFormat filter extends the NumberParse filter and supports the same options and methods for locale, style, type and formatter. The descriptions with examples of usage can be found there: Using Locale Setting Style Setting Type Setting Custom NumberFormatter","title":"Inherited Options and Methods"},{"location":"filters/number-parse/","text":"NumberParse The NumberParse filter can be used to parse a number from a string . It acts as a wrapper for the NumberFormatter class within PHP's internationalization extension ( ext/intl ). Basic Usage $filter = new Laminas\\I18n\\Filter\\NumberParse(); echo $filter-&gt;filter('1.234.567,891'); // 1234567.8912346 By default, if no locale is provided, NumberParse will use the system locale provided by PHP's Locale class and the getDefault() method. (The above example assumes that the environment locale is set to de_DE .) Using Locale The locale string used in identifying the characters to filter (locale name, e.g. en_US or de_DE ). Constructor Usage $filter = new Laminas\\I18n\\Filter\\NumberParse('de_DE'); echo $filter-&gt;filter('1.234.567,891'); // 1234567.8912346 Setter Usage $filter = new Laminas\\I18n\\Filter\\NumberParse(); $filter-&gt;setLocale('de_DE'); echo $filter-&gt;filter('1.234.567,891'); // 1234567.8912346 Locale Class Usage Locale::setDefault('de_DE'); $filter = new Laminas\\I18n\\Filter\\NumberParse(); echo $filter-&gt;filter('1.234.567,891'); // 1234567.8912346 Note After the first filtering, the locale changes will have no effect anymore. Create a new instance of the filter to change the locale. Get Current Value To get the current value of this option, use the getLocale() method. $filter = new Laminas\\I18n\\Filter\\NumberParse('en_US'); echo $filter-&gt;getLocale(); // 'en_US' Default Value By default, if no locale is provided, NumberParse will use the system locale provided by PHP's Locale::getDefault() . Using Style This option sets the style of the parsing; one of the NumberFormatter format style constants . Constructor Usage // Example 1 $filter = new Laminas\\I18n\\Filter\\NumberParse('en_US', NumberFormatter::PERCENT); echo $filter-&gt;filter('80%'); // 0.80 // Example 2 $filter = new Laminas\\I18n\\Filter\\NumberParse('fr_FR', NumberFormatter::SCIENTIFIC); echo $filter-&gt;filter('1,23456789E-3'); // 0.00123456789 Setter Usage // Example 1 $filter = new Laminas\\I18n\\Filter\\NumberParse('en_US'); $filter-&gt;setStyle(NumberFormatter::PERCENT); echo $filter-&gt;filter('80%'); // 0.80 // Example 2 $filter = new Laminas\\I18n\\Filter\\NumberParse('fr_FR'); $filter-&gt;setStyle(NumberFormatter::SCIENTIFIC); echo $filter-&gt;filter('1,23456789E-3'); // 0.00123456789 Note After the first filtering, the style changes will have no effect anymore. Create a new instance of the filter to change the style. Get Current Value To get the current value of this option, use the getStyle() method. $filter = new Laminas\\I18n\\Filter\\NumberParse(); echo $filter-&gt;getStyle(); // 1 (NumberFormatter::DEFAULT_STYLE) Default Value The default value of this option is NumberFormatter::DEFAULT_STYLE . Using Type The type speficied the NumberFormatter parsing type to use. Constructor Usage $filter = new Laminas\\I18n\\Filter\\NumberParse( 'de_DE', NumberFormatter::DEFAULT_STYLE, NumberFormatter::DECIMAL ); echo $filter-&gt;filter('1.234.567,891'); // 1234567 Setter Usage $filter = new Laminas\\I18n\\Filter\\NumberParse(); $filter-&gt;setLocale('de_DE'); $filter-&gt;setType(NumberFormatter::DECIMAL); echo $filter-&gt;filter('1.234.567,891'); // 1234567 Get Current Value To get the current value of this option, use the getType() method. $filter = new Laminas\\I18n\\Filter\\NumberParse(); echo $filter-&gt;getType(); // 3 (NumberFormatter::TYPE_DOUBLE) Default Value The default value of this option is NumberFormatter::TYPE_DOUBLE . Using Custom NumberFormatter $formatter = new NumberFormatter('en_US', NumberFormatter::PERCENT); $filter = new Laminas\\I18n\\Filter\\NumberParse(); $filter-&gt;setFormatter($formatter); Note If a custom formatter is set, the locale and/or the style changes will have no effect anymore. Set a new number formatter to change the locale and/or the style. Get Current Value To get the current value of this option, use the getFormatter() method. $filter = new Laminas\\I18n\\Filter\\NumberParse(); $formatter = $filter-&gt;getFormatter(); // instance of `NumberFormatter` Default Value The default value of this option is an instance of PHP's NumberFormatter class. Created with the current values for locale and style of the filter.","title":"NumberParse"},{"location":"filters/number-parse/#numberparse","text":"The NumberParse filter can be used to parse a number from a string . It acts as a wrapper for the NumberFormatter class within PHP's internationalization extension ( ext/intl ).","title":"NumberParse"},{"location":"filters/number-parse/#basic-usage","text":"$filter = new Laminas\\I18n\\Filter\\NumberParse(); echo $filter-&gt;filter('1.234.567,891'); // 1234567.8912346 By default, if no locale is provided, NumberParse will use the system locale provided by PHP's Locale class and the getDefault() method. (The above example assumes that the environment locale is set to de_DE .)","title":"Basic Usage"},{"location":"filters/number-parse/#using-locale","text":"The locale string used in identifying the characters to filter (locale name, e.g. en_US or de_DE ). Constructor Usage $filter = new Laminas\\I18n\\Filter\\NumberParse('de_DE'); echo $filter-&gt;filter('1.234.567,891'); // 1234567.8912346 Setter Usage $filter = new Laminas\\I18n\\Filter\\NumberParse(); $filter-&gt;setLocale('de_DE'); echo $filter-&gt;filter('1.234.567,891'); // 1234567.8912346 Locale Class Usage Locale::setDefault('de_DE'); $filter = new Laminas\\I18n\\Filter\\NumberParse(); echo $filter-&gt;filter('1.234.567,891'); // 1234567.8912346 Note After the first filtering, the locale changes will have no effect anymore. Create a new instance of the filter to change the locale.","title":"Using Locale"},{"location":"filters/number-parse/#using-style","text":"This option sets the style of the parsing; one of the NumberFormatter format style constants . Constructor Usage // Example 1 $filter = new Laminas\\I18n\\Filter\\NumberParse('en_US', NumberFormatter::PERCENT); echo $filter-&gt;filter('80%'); // 0.80 // Example 2 $filter = new Laminas\\I18n\\Filter\\NumberParse('fr_FR', NumberFormatter::SCIENTIFIC); echo $filter-&gt;filter('1,23456789E-3'); // 0.00123456789 Setter Usage // Example 1 $filter = new Laminas\\I18n\\Filter\\NumberParse('en_US'); $filter-&gt;setStyle(NumberFormatter::PERCENT); echo $filter-&gt;filter('80%'); // 0.80 // Example 2 $filter = new Laminas\\I18n\\Filter\\NumberParse('fr_FR'); $filter-&gt;setStyle(NumberFormatter::SCIENTIFIC); echo $filter-&gt;filter('1,23456789E-3'); // 0.00123456789 Note After the first filtering, the style changes will have no effect anymore. Create a new instance of the filter to change the style.","title":"Using Style"},{"location":"filters/number-parse/#using-type","text":"The type speficied the NumberFormatter parsing type to use. Constructor Usage $filter = new Laminas\\I18n\\Filter\\NumberParse( 'de_DE', NumberFormatter::DEFAULT_STYLE, NumberFormatter::DECIMAL ); echo $filter-&gt;filter('1.234.567,891'); // 1234567 Setter Usage $filter = new Laminas\\I18n\\Filter\\NumberParse(); $filter-&gt;setLocale('de_DE'); $filter-&gt;setType(NumberFormatter::DECIMAL); echo $filter-&gt;filter('1.234.567,891'); // 1234567","title":"Using Type"},{"location":"filters/number-parse/#using-custom-numberformatter","text":"$formatter = new NumberFormatter('en_US', NumberFormatter::PERCENT); $filter = new Laminas\\I18n\\Filter\\NumberParse(); $filter-&gt;setFormatter($formatter); Note If a custom formatter is set, the locale and/or the style changes will have no effect anymore. Set a new number formatter to change the locale and/or the style.","title":"Using Custom NumberFormatter"},{"location":"migration/migration-to-v2.4/","text":"Migration from Versions prior to 2.4 General Version 2.4 adds support for PHP 7. Validators IsFloat In PHP 7, float is a reserved keyword, which required renaming the Laminas\\I18n\\Validator\\Float validator. If you were using the Laminas\\I18n\\Validator\\Float validator directly previously, you will now receive an E_USER_DEPRECATED notice on instantiation. Please update your code to refer to the Laminas\\I18n\\Validator\\IsFloat class instead. Users pulling their Laminas\\I18n\\Validator\\Float validator instance from the validator plugin manager receive an Laminas\\I18n\\Validator\\IsFloat instance instead starting in 2.4.0. IsInt In PHP 7, int is a reserved keyword, which required renaming the Laminas\\I18n\\Validator\\Int validator. If you were using the Laminas\\I18n\\Validator\\Int validator directly previously, you will now receive an E_USER_DEPRECATED notice on instantiation. Please update your code to refer to the Laminas\\I18n\\Validator\\IsInt class instead. Users pulling their Laminas\\I18n\\Validator\\Int validator instance from the validator plugin manager receive an Laminas\\I18n\\Validator\\IsInt instance instead starting in 2.4.0.","title":"Migration from Versions prior to 2.4"},{"location":"migration/migration-to-v2.4/#migration-from-versions-prior-to-24","text":"","title":"Migration from Versions prior to 2.4"},{"location":"migration/migration-to-v2.4/#general","text":"Version 2.4 adds support for PHP 7.","title":"General"},{"location":"migration/migration-to-v2.4/#validators","text":"","title":"Validators"},{"location":"translator/caching/","text":"Caching In production, it makes sense to cache your translations. This not only saves you from loading and parsing the individual formats each time, but also guarantees an optimized loading procedure. Installation Requirements The cache support of laminas-i18n depends on the laminas-cache component, so be sure to have it installed before getting started: $ composer require laminas/laminas-cache Version 3 of laminas-cache removed support for factories required by this component, so if your application requires laminas-cache version 3 or later, you will also need to install laminas-cache-storage-deprecated-factory $ composer require laminas/laminas-cache-storage-deprecated-factory laminas-cache is shipped without a specific cache adapter to allow free choice of storage backends and their dependencies. So make sure that the required adapters are installed. The following example used the memory adapter of laminas-cache : $ composer require laminas/laminas-cache-storage-adapter-memory Enable Caching To enable caching, pass a Laminas\\Cache\\Storage\\Adapter to the setCache() method. $translator = new Laminas\\I18n\\Translator\\Translator(); $cache = Laminas\\Cache\\StorageFactory::factory([ 'adapter' =&gt; [ 'name' =&gt; Laminas\\Cache\\Storage\\Adapter\\Memory::class, ], ]); $translator-&gt;setCache($cache); The explanation of creating a cache and using different adapters for caching can be found in documentation of laminas-cache . Disable Caching To disable the cache, pass a null value to the setCache() method. $translator-&gt;setCache(null); Clear Cache To clear the cache for a specific text domain and locale, use the clearCache method. $translator-&gt;clearCache('default', 'en_US'); Get Cache Identifier To get the cache identifier for a specific text domain and locale, use the getCacheId method: $translator-&gt;getCacheId('default', 'en_US');","title":"Caching"},{"location":"translator/caching/#caching","text":"In production, it makes sense to cache your translations. This not only saves you from loading and parsing the individual formats each time, but also guarantees an optimized loading procedure. Installation Requirements The cache support of laminas-i18n depends on the laminas-cache component, so be sure to have it installed before getting started: $ composer require laminas/laminas-cache Version 3 of laminas-cache removed support for factories required by this component, so if your application requires laminas-cache version 3 or later, you will also need to install laminas-cache-storage-deprecated-factory $ composer require laminas/laminas-cache-storage-deprecated-factory laminas-cache is shipped without a specific cache adapter to allow free choice of storage backends and their dependencies. So make sure that the required adapters are installed. The following example used the memory adapter of laminas-cache : $ composer require laminas/laminas-cache-storage-adapter-memory","title":"Caching"},{"location":"translator/caching/#enable-caching","text":"To enable caching, pass a Laminas\\Cache\\Storage\\Adapter to the setCache() method. $translator = new Laminas\\I18n\\Translator\\Translator(); $cache = Laminas\\Cache\\StorageFactory::factory([ 'adapter' =&gt; [ 'name' =&gt; Laminas\\Cache\\Storage\\Adapter\\Memory::class, ], ]); $translator-&gt;setCache($cache); The explanation of creating a cache and using different adapters for caching can be found in documentation of laminas-cache .","title":"Enable Caching"},{"location":"translator/caching/#disable-caching","text":"To disable the cache, pass a null value to the setCache() method. $translator-&gt;setCache(null);","title":"Disable Caching"},{"location":"translator/caching/#clear-cache","text":"To clear the cache for a specific text domain and locale, use the clearCache method. $translator-&gt;clearCache('default', 'en_US');","title":"Clear Cache"},{"location":"translator/caching/#get-cache-identifier","text":"To get the cache identifier for a specific text domain and locale, use the getCacheId method: $translator-&gt;getCacheId('default', 'en_US');","title":"Get Cache Identifier"},{"location":"translator/events/","text":"Events The translator of laminas-i18n triggers two events during the processing of translations: Laminas\\I18n\\Translator\\Translator::EVENT_MISSING_TRANSLATION Laminas\\I18n\\Translator\\Translator::EVENT_NO_MESSAGES_LOADED The typical usage for these events is to log missing translations and track when the loading of messages fails. Installation Requirements The event support of laminas-i18n depends on the laminas-eventmanager component, so be sure to have it installed before getting started: $ composer require laminas/laminas-eventmanager Basic Usage // Set locale Locale::setDefault('de_DE'); // Create translator $translator = new Laminas\\I18n\\Translator\\Translator(); // Enable event manager $translator-&gt;enableEventManager(); // Attach listener $translator-&gt;getEventManager()-&gt;attach( Laminas\\I18n\\Translator\\Translator::EVENT_MISSING_TRANSLATION, static function (Laminas\\EventManager\\EventInterface $event) { var_dump($event-&gt;getName()); // 'missingTranslation' (Laminas\\I18n\\Translator\\Translator::EVENT_MISSING_TRANSLATION) var_dump($event-&gt;getParams()); // ['message' =&gt; 'car', 'locale' =&gt; 'de_DE', 'text_domain' =&gt; 'default'] } ); // Trigger related events echo $translator-&gt;translate('car'); Using Event Manager Enable Event Manager To enable the event manager, call the enableEventManager() method. $translator-&gt;enableEventManager(); The event manager can also be enabled per factory . Disable Event Manager To disable the event manager, call the disableEventManager() method. $translator-&gt;disableEventManager(); Check Availability of Event Manager To check the availability of the event manager, call the isEventManagerEnabled() method. $translator-&gt;enableEventManager(); $result = $translator-&gt;isEventManagerEnabled(); // true Default Value The default value of this option is false . Get Event Manager $eventManager = $translator-&gt;getEventManager(); // instance of Laminas\\EventManager\\EventManager Automatic Instantiation The translator can create an event manager instance independently. If no custom event manager is set for the translator, the getEventManager() method returns this instance. Default Value The default value of this option is an instance of Laminas\\EventManager\\EventManager class. Set Custom Event Manager $eventManager = Laminas\\EventManager\\EventManager(); $translator-&gt;setEventManager($eventManager); Attach Event Listener A listener is attached to the event manager. $translator-&gt;getEventManager()-&gt;attach( Laminas\\I18n\\Translator\\Translator::EVENT_MISSING_TRANSLATION, static function (Laminas\\EventManager\\EventInterface $event) { // â€¦ } ); Event Target and Parameters In the previous code example the variable $event contains an instance of Laminas\\EventManager\\Event which implements Laminas\\EventManager\\EventInterface . As target of the event the current instance of Laminas\\I18n\\Translator\\Translator is set. $target = $event-&gt;getTarget(); // instance of Laminas\\I18n\\Translator\\Translator For the event Laminas\\I18n\\Translator\\Translator::EVENT_MISSING_TRANSLATION the following parameters are set: message (string) locale (string) text_domain (string) $params = $event-&gt;getParams(); // ['message' =&gt; 'â€¦', 'locale' =&gt; 'â€¦', 'text_domain' =&gt; 'â€¦'] For the event Laminas\\I18n\\Translator\\Translator::EVENT_NO_MESSAGES_LOADED : locale (string) text_domain (string) $params = $event-&gt;getParams(); // ['locale' =&gt; 'â€¦', 'text_domain' =&gt; 'â€¦'] Example Installation Requirements The following examples depends on the laminas-log component, so be sure to have it installed before getting started: $ composer require laminas/laminas-log The following example does not add any translations to demonstrate the logging. // Set locale Locale::setDefault('de_DE'); // Create file logger $writer = new Laminas\\Log\\Writer\\Stream(__DIR__ . '/translator.log'); $logger = new Laminas\\Log\\Logger(); $logger-&gt;addWriter($writer); // Create translator $translator = new Laminas\\I18n\\Translator\\Translator(); // Omit adding translations for demonstration // $translator-&gt;addTranslationFile(â€¦); // Enable event manager $translator-&gt;enableEventManager(); // Attach listeners $translator-&gt;getEventManager()-&gt;attach( Laminas\\I18n\\Translator\\Translator::EVENT_MISSING_TRANSLATION, static function (Laminas\\EventManager\\EventInterface $event) use ($logger) { $logger-&gt;error('Missing translation', $event-&gt;getParams()); } ); $translator-&gt;getEventManager()-&gt;attach( Laminas\\I18n\\Translator\\Translator::EVENT_NO_MESSAGES_LOADED, static function (Laminas\\EventManager\\EventInterface $event) use ($logger) { $logger-&gt;error('No messages loaded', $event-&gt;getParams()); } ); // Trigger event for no messages loaded and missing translation echo $translator-&gt;translate('car'); // 'car' This creates two entries in the log file: 2020-03-20T21:00:30+00:00 ERR (3): No messages loaded {\"locale\":\"de_DE\",\"text_domain\":\"default\"} 2020-03-20T21:00:30+00:00 ERR (3): Missing translation {\"message\":\"car\",\"locale\":\"de_DE\",\"text_domain\":\"default\"} The concept of logging, creating logger with writer and to write messages can be found in documentation of laminas-log .","title":"Events"},{"location":"translator/events/#events","text":"The translator of laminas-i18n triggers two events during the processing of translations: Laminas\\I18n\\Translator\\Translator::EVENT_MISSING_TRANSLATION Laminas\\I18n\\Translator\\Translator::EVENT_NO_MESSAGES_LOADED The typical usage for these events is to log missing translations and track when the loading of messages fails. Installation Requirements The event support of laminas-i18n depends on the laminas-eventmanager component, so be sure to have it installed before getting started: $ composer require laminas/laminas-eventmanager","title":"Events"},{"location":"translator/events/#basic-usage","text":"// Set locale Locale::setDefault('de_DE'); // Create translator $translator = new Laminas\\I18n\\Translator\\Translator(); // Enable event manager $translator-&gt;enableEventManager(); // Attach listener $translator-&gt;getEventManager()-&gt;attach( Laminas\\I18n\\Translator\\Translator::EVENT_MISSING_TRANSLATION, static function (Laminas\\EventManager\\EventInterface $event) { var_dump($event-&gt;getName()); // 'missingTranslation' (Laminas\\I18n\\Translator\\Translator::EVENT_MISSING_TRANSLATION) var_dump($event-&gt;getParams()); // ['message' =&gt; 'car', 'locale' =&gt; 'de_DE', 'text_domain' =&gt; 'default'] } ); // Trigger related events echo $translator-&gt;translate('car');","title":"Basic Usage"},{"location":"translator/events/#using-event-manager","text":"","title":"Using Event Manager"},{"location":"translator/events/#attach-event-listener","text":"A listener is attached to the event manager. $translator-&gt;getEventManager()-&gt;attach( Laminas\\I18n\\Translator\\Translator::EVENT_MISSING_TRANSLATION, static function (Laminas\\EventManager\\EventInterface $event) { // â€¦ } );","title":"Attach Event Listener"},{"location":"translator/events/#example","text":"Installation Requirements The following examples depends on the laminas-log component, so be sure to have it installed before getting started: $ composer require laminas/laminas-log The following example does not add any translations to demonstrate the logging. // Set locale Locale::setDefault('de_DE'); // Create file logger $writer = new Laminas\\Log\\Writer\\Stream(__DIR__ . '/translator.log'); $logger = new Laminas\\Log\\Logger(); $logger-&gt;addWriter($writer); // Create translator $translator = new Laminas\\I18n\\Translator\\Translator(); // Omit adding translations for demonstration // $translator-&gt;addTranslationFile(â€¦); // Enable event manager $translator-&gt;enableEventManager(); // Attach listeners $translator-&gt;getEventManager()-&gt;attach( Laminas\\I18n\\Translator\\Translator::EVENT_MISSING_TRANSLATION, static function (Laminas\\EventManager\\EventInterface $event) use ($logger) { $logger-&gt;error('Missing translation', $event-&gt;getParams()); } ); $translator-&gt;getEventManager()-&gt;attach( Laminas\\I18n\\Translator\\Translator::EVENT_NO_MESSAGES_LOADED, static function (Laminas\\EventManager\\EventInterface $event) use ($logger) { $logger-&gt;error('No messages loaded', $event-&gt;getParams()); } ); // Trigger event for no messages loaded and missing translation echo $translator-&gt;translate('car'); // 'car' This creates two entries in the log file: 2020-03-20T21:00:30+00:00 ERR (3): No messages loaded {\"locale\":\"de_DE\",\"text_domain\":\"default\"} 2020-03-20T21:00:30+00:00 ERR (3): Missing translation {\"message\":\"car\",\"locale\":\"de_DE\",\"text_domain\":\"default\"} The concept of logging, creating logger with writer and to write messages can be found in documentation of laminas-log .","title":"Example"},{"location":"translator/factory/","text":"Factory Setting Locale $translator = Laminas\\I18n\\Translator\\Translator::factory([ 'locale' =&gt; 'de_DE', ]); Setting Fallback Locale $translator = Laminas\\I18n\\Translator\\Translator::factory([ 'locale' =&gt; [ 'de_DE', // Default locale 'en_GB', // Fallback locale ], ]); Setting Translation File Patterns $translator = Laminas\\I18n\\Translator\\Translator::factory([ 'translation_file_patterns' =&gt; [ [ 'type' =&gt; Laminas\\I18n\\Translator\\Loader\\PhpArray::class, 'base_dir' =&gt; __DIR__ . '/languages', 'pattern' =&gt; '%s.php', ], [ 'type' =&gt; Laminas\\I18n\\Translator\\Loader\\PhpArray::class, 'base_dir' =&gt; __DIR__ . '/languages', 'pattern' =&gt; 'album-%s.php', 'text_domain' =&gt; 'album', ], ], ]); Each file pattern option array must contain type , base_dir and pattern . The option for text_domain is optional. The default value for text_domain is default . Setting Translation Files $translator = Laminas\\I18n\\Translator\\Translator::factory([ 'translation_files' =&gt; [ [ 'type' =&gt; Laminas\\I18n\\Translator\\Loader\\PhpArray::class, 'filename' =&gt; __DIR__ . '/languages/en_GB.php', ], [ 'type' =&gt; Laminas\\I18n\\Translator\\Loader\\PhpArray::class, 'filename' =&gt; __DIR__ . '/languages/de_DE.php', 'locale' =&gt; 'de_DE', ], [ 'type' =&gt; Laminas\\I18n\\Translator\\Loader\\PhpArray::class, 'filename' =&gt; __DIR__ . '/languages/album-de_DE.php', 'locale' =&gt; 'de_DE', 'text_domain' =&gt; 'album', ], ], ]); Each file option array must contain type and filename . The options for locale and the text_domain are optional. The default value for locale is null and for text_domain it is default . Setting Remote Translations $translator = Laminas\\I18n\\Translator\\Translator::factory([ 'remote_translation' =&gt; [ [ 'type' =&gt; 'translation-de_DE', // Custom name ], [ 'type' =&gt; 'translation-de_DE', // Custom name 'text_domain' =&gt; 'album', ], ], ]); Each remote option array must contain type . The option for text_domain is optional. The default value for text_domain is default . Adding Translations $translator-&gt;getPluginManager()-&gt;setService( 'translation-de_DE', // Custom name new \\Laminas\\I18n\\Translator\\Loader\\PhpMemoryArray([ 'default' =&gt; [ 'de_DE' =&gt; [ 'car' =&gt; 'Auto', 'train' =&gt; 'Zug', ], ], 'album' =&gt; [ 'de_DE' =&gt; [ 'music' =&gt; 'Musik', ], ], ]) ); Setting Cache Using a Cache Instance $cache = Laminas\\Cache\\StorageFactory::factory([ 'adapter' =&gt; [ 'name' =&gt; Laminas\\Cache\\Storage\\Adapter\\Filesystem::class, 'options' =&gt; [ 'cache_dir' =&gt; __DIR__ . '/cache', ], ], ]); $translator = Laminas\\I18n\\Translator\\Translator::factory([ 'cache' =&gt; $cache, ]); Using Cache Configuration $translator = Laminas\\I18n\\Translator\\Translator::factory([ 'cache' =&gt; [ 'adapter' =&gt; [ 'name' =&gt; Laminas\\Cache\\Storage\\Adapter\\Filesystem::class, 'options' =&gt; [ 'cache_dir' =&gt; __DIR__ . '/cache', ], ], ], ]); Enable EventManager $translator = Laminas\\I18n\\Translator\\Translator::factory([ 'event_manager_enabled' =&gt; true, ]);","title":"Factory"},{"location":"translator/factory/#factory","text":"","title":"Factory"},{"location":"translator/factory/#setting-locale","text":"$translator = Laminas\\I18n\\Translator\\Translator::factory([ 'locale' =&gt; 'de_DE', ]);","title":"Setting Locale"},{"location":"translator/factory/#setting-fallback-locale","text":"$translator = Laminas\\I18n\\Translator\\Translator::factory([ 'locale' =&gt; [ 'de_DE', // Default locale 'en_GB', // Fallback locale ], ]);","title":"Setting Fallback Locale"},{"location":"translator/factory/#setting-translation-file-patterns","text":"$translator = Laminas\\I18n\\Translator\\Translator::factory([ 'translation_file_patterns' =&gt; [ [ 'type' =&gt; Laminas\\I18n\\Translator\\Loader\\PhpArray::class, 'base_dir' =&gt; __DIR__ . '/languages', 'pattern' =&gt; '%s.php', ], [ 'type' =&gt; Laminas\\I18n\\Translator\\Loader\\PhpArray::class, 'base_dir' =&gt; __DIR__ . '/languages', 'pattern' =&gt; 'album-%s.php', 'text_domain' =&gt; 'album', ], ], ]); Each file pattern option array must contain type , base_dir and pattern . The option for text_domain is optional. The default value for text_domain is default .","title":"Setting Translation File Patterns"},{"location":"translator/factory/#setting-translation-files","text":"$translator = Laminas\\I18n\\Translator\\Translator::factory([ 'translation_files' =&gt; [ [ 'type' =&gt; Laminas\\I18n\\Translator\\Loader\\PhpArray::class, 'filename' =&gt; __DIR__ . '/languages/en_GB.php', ], [ 'type' =&gt; Laminas\\I18n\\Translator\\Loader\\PhpArray::class, 'filename' =&gt; __DIR__ . '/languages/de_DE.php', 'locale' =&gt; 'de_DE', ], [ 'type' =&gt; Laminas\\I18n\\Translator\\Loader\\PhpArray::class, 'filename' =&gt; __DIR__ . '/languages/album-de_DE.php', 'locale' =&gt; 'de_DE', 'text_domain' =&gt; 'album', ], ], ]); Each file option array must contain type and filename . The options for locale and the text_domain are optional. The default value for locale is null and for text_domain it is default .","title":"Setting Translation Files"},{"location":"translator/factory/#setting-remote-translations","text":"$translator = Laminas\\I18n\\Translator\\Translator::factory([ 'remote_translation' =&gt; [ [ 'type' =&gt; 'translation-de_DE', // Custom name ], [ 'type' =&gt; 'translation-de_DE', // Custom name 'text_domain' =&gt; 'album', ], ], ]); Each remote option array must contain type . The option for text_domain is optional. The default value for text_domain is default .","title":"Setting Remote Translations"},{"location":"translator/factory/#setting-cache","text":"","title":"Setting Cache"},{"location":"translator/factory/#enable-eventmanager","text":"$translator = Laminas\\I18n\\Translator\\Translator::factory([ 'event_manager_enabled' =&gt; true, ]);","title":"Enable EventManager"},{"location":"translator/format-examples/","text":"Format Examples PHP For example languages/de_DE.php : return [ // Message =&gt; Translation 'car' =&gt; 'Auto', 'train' =&gt; 'Zug', ]; Plural For example languages/en_GB.php : return [ // Rule for English '' =&gt; [ 'plural_forms' =&gt; 'nplurals=2; plural=(n==1 ? 0 : 1)', ], // Messages 'car' =&gt; 'car', 'train' =&gt; 'train', ]; For example languages/fr_FR.php : return [ // Rule for French '' =&gt; [ 'plural_forms' =&gt; 'nplurals=2; plural=(n==0 || n==1 ? 0 : 1)', ], // Messages 'car' =&gt; 'voiture', 'train' =&gt; 'train', ]; INI Normal Syntax For example languages/de_DE.ini : ; Message identifier1.message = \"car\" ; Translation identifier1.translation = \"Auto\" identifier2.message = \"train\" identifier2.translation = \"Zug\" Simple Syntax For example languages/de_DE.ini : ; Message identifier1[] = \"car\" ; Translation identifier1[] = \"Auto\" identifier2[] = \"train\" identifier2[] = \"Zug\" Plural For example languages/en_GB.ini : [plural] plural_forms = 'nplurals=2; plural=(n==1 ? 0 : 1)' [translation] identifier1.message = \"car\" identifier1.translation = \"car\" identifier2.message = \"train\" identifier2.translation = \"train\" For example languages/fr_FR.ini : [plural] plural_forms = 'nplurals=2; plural=(n==0 || n==1 ? 0 : 1)' [translation] identifier1.message = \"car\" identifier1.translation = \"voiture\" identifier2.message = \"train\" identifier2.translation = \"train\"","title":"Format Examples"},{"location":"translator/format-examples/#format-examples","text":"","title":"Format Examples"},{"location":"translator/format-examples/#php","text":"For example languages/de_DE.php : return [ // Message =&gt; Translation 'car' =&gt; 'Auto', 'train' =&gt; 'Zug', ];","title":"PHP"},{"location":"translator/format-examples/#ini","text":"","title":"INI"},{"location":"validators/alnum/","text":"Alnum Laminas\\I18n\\Validator\\Alnum allows you to validate if a given value contains only alphabetical characters and digits . Basic Usage $validator = new Laminas\\I18n\\Validator\\Alnum(); if ($validator-&gt;isValid('Abcd12')) { // Value contains only allowed chars } Using Whitespace By default, whitespace is not accepted as it is not part of the alphabet. However, if you want to validate complete sentences or phrases, you may need to allow whitespace; this can be done via the allowWhiteSpace option, either at instantiation or afterwards via the setAllowWhiteSpace() method. Constructor Usage $validator = new Laminas\\I18n\\Validator\\Alnum(['allowWhiteSpace' =&gt; true]); if ($validator-&gt;isValid('Abcd and 12')) { // Value contains only allowed chars } Setter Usage $validator = new Laminas\\I18n\\Validator\\Alnum(); $validator-&gt;setAllowWhiteSpace(true); if ($validator-&gt;isValid('Abcd and 12')) { // Value contains only allowed chars } Get Current Value To get the current value of this option, use the getAllowWhiteSpace() method. $validator = new Laminas\\I18n\\Validator\\Alnum(['allowWhiteSpace' =&gt; true]); $result = $validator-&gt;getAllowWhiteSpace(); // true Default Value The default value of this option is false that means whitespace characters are not allowed. Using different Languages Several languages supported by PHP's internationalization extension ( ext/intl ) use alphabets where characters are formed from multiple bytes, including Korean , Japanese , and Chinese . Such languages therefore are unsupported with regards to the Alnum validator. When using the Alnum validator with these languages, the input will be validated using the English alphabet.","title":"Alnum"},{"location":"validators/alnum/#alnum","text":"Laminas\\I18n\\Validator\\Alnum allows you to validate if a given value contains only alphabetical characters and digits .","title":"Alnum"},{"location":"validators/alnum/#basic-usage","text":"$validator = new Laminas\\I18n\\Validator\\Alnum(); if ($validator-&gt;isValid('Abcd12')) { // Value contains only allowed chars }","title":"Basic Usage"},{"location":"validators/alnum/#using-whitespace","text":"By default, whitespace is not accepted as it is not part of the alphabet. However, if you want to validate complete sentences or phrases, you may need to allow whitespace; this can be done via the allowWhiteSpace option, either at instantiation or afterwards via the setAllowWhiteSpace() method. Constructor Usage $validator = new Laminas\\I18n\\Validator\\Alnum(['allowWhiteSpace' =&gt; true]); if ($validator-&gt;isValid('Abcd and 12')) { // Value contains only allowed chars } Setter Usage $validator = new Laminas\\I18n\\Validator\\Alnum(); $validator-&gt;setAllowWhiteSpace(true); if ($validator-&gt;isValid('Abcd and 12')) { // Value contains only allowed chars }","title":"Using Whitespace"},{"location":"validators/alnum/#using-different-languages","text":"Several languages supported by PHP's internationalization extension ( ext/intl ) use alphabets where characters are formed from multiple bytes, including Korean , Japanese , and Chinese . Such languages therefore are unsupported with regards to the Alnum validator. When using the Alnum validator with these languages, the input will be validated using the English alphabet.","title":"Using different Languages"},{"location":"validators/alpha/","text":"Alpha Laminas\\I18n\\Validator\\Alpha allows you to validate if a given value contains only alphabetical characters . This validator is identical to the Laminas\\I18n\\Validator\\Alnum validator with the exception that it does not accept digits. Basic Usage $validator = new Laminas\\I18n\\Validator\\Alpha(); if ($validator-&gt;isValid('Abcd')) { // Value contains only allowed chars } Using Whitespace By default, whitespace is not accepted as it is not part of the alphabet. However, if you want to validate complete sentences or phrases, you may need to allow whitespace; this can be done via the allowWhiteSpace option, either at instantiation or afterwards via the setAllowWhiteSpace() method. Constructor Usage $validator = new Laminas\\I18n\\Validator\\Alpha(['allowWhiteSpace' =&gt; true]); if ($validator-&gt;isValid('Abcd and efg')) { // Value contains only allowed chars } Setter Usage $validator = new Laminas\\I18n\\Validator\\Alpha(); $validator-&gt;setAllowWhiteSpace(true); if ($validator-&gt;isValid('Abcd and efg')) { // Value contains only allowed chars } Get Current Value To get the current value of this option, use the getAllowWhiteSpace() method. $validator = new Laminas\\I18n\\Validator\\Alpha(['allowWhiteSpace' =&gt; true]); $result = $validator-&gt;getAllowWhiteSpace(); // true Default Value The default value of this option is false that means whitespace characters are not allowed. Using different Languages When using Laminas\\I18n\\Validator\\Alpha , the language provided by the user's browser will be used to set the allowed characters. For locales outside of English, this means that additional alphabetic characters may be used â€” such as Ã¤ , Ã¶ and Ã¼ from the German alphabet. Which characters are allowed depends completely on the language, as every language defines its own set of characters. Three languages supported by PHP's internationalization extension ( ext/intl ), however, define multibyte characters, which cannot be matched as alphabetic characters using normal string or regular expression options. These include Korean , Japanese , and Chinese . As a result, when using the Alpha validator with these languages, the input will be validated using the English alphabet.","title":"Alpha"},{"location":"validators/alpha/#alpha","text":"Laminas\\I18n\\Validator\\Alpha allows you to validate if a given value contains only alphabetical characters . This validator is identical to the Laminas\\I18n\\Validator\\Alnum validator with the exception that it does not accept digits.","title":"Alpha"},{"location":"validators/alpha/#basic-usage","text":"$validator = new Laminas\\I18n\\Validator\\Alpha(); if ($validator-&gt;isValid('Abcd')) { // Value contains only allowed chars }","title":"Basic Usage"},{"location":"validators/alpha/#using-whitespace","text":"By default, whitespace is not accepted as it is not part of the alphabet. However, if you want to validate complete sentences or phrases, you may need to allow whitespace; this can be done via the allowWhiteSpace option, either at instantiation or afterwards via the setAllowWhiteSpace() method. Constructor Usage $validator = new Laminas\\I18n\\Validator\\Alpha(['allowWhiteSpace' =&gt; true]); if ($validator-&gt;isValid('Abcd and efg')) { // Value contains only allowed chars } Setter Usage $validator = new Laminas\\I18n\\Validator\\Alpha(); $validator-&gt;setAllowWhiteSpace(true); if ($validator-&gt;isValid('Abcd and efg')) { // Value contains only allowed chars }","title":"Using Whitespace"},{"location":"validators/alpha/#using-different-languages","text":"When using Laminas\\I18n\\Validator\\Alpha , the language provided by the user's browser will be used to set the allowed characters. For locales outside of English, this means that additional alphabetic characters may be used â€” such as Ã¤ , Ã¶ and Ã¼ from the German alphabet. Which characters are allowed depends completely on the language, as every language defines its own set of characters. Three languages supported by PHP's internationalization extension ( ext/intl ), however, define multibyte characters, which cannot be matched as alphabetic characters using normal string or regular expression options. These include Korean , Japanese , and Chinese . As a result, when using the Alpha validator with these languages, the input will be validated using the English alphabet.","title":"Using different Languages"},{"location":"validators/country-code/","text":"CountryCode Laminas\\I18n\\Validator\\CountryCode allows you to validate if a given value is known and valid two-letter country codes of ISO-3166 alpha-2 . Basic Usage $validator = new Laminas\\I18n\\Validator\\CountryCode(); if ($validator-&gt;isValid('FR')) { // Value is a valid country code }","title":"CountryCode"},{"location":"validators/country-code/#countrycode","text":"Laminas\\I18n\\Validator\\CountryCode allows you to validate if a given value is known and valid two-letter country codes of ISO-3166 alpha-2 .","title":"CountryCode"},{"location":"validators/country-code/#basic-usage","text":"$validator = new Laminas\\I18n\\Validator\\CountryCode(); if ($validator-&gt;isValid('FR')) { // Value is a valid country code }","title":"Basic Usage"},{"location":"validators/date-time/","text":"DateTime Laminas\\I18n\\Validator\\DateTime allows you to determine if a given value is a valid date, time or datetime . Internally, PHP's IntlDateFormatter tries to create a date time for the given value and locale. Basic Usage $validator = new Laminas\\I18n\\Validator\\DateTime(); var_dump($validator-&gt;isValid('20190228 10:00 pm')); // true var_dump($validator-&gt;isValid('20190229 10:00 pm')); // false var_dump($validator-&gt;isValid('20200229 10:00 pm')); // true By default, if no locale is provided, DateTime will use the system locale provided by PHP's Locale::getDefault() and the default timezone provided by PHP's date_default_timezone_get . (The above example assumes that the environment locale is set to en_EN and the timezone is set to Europe/London .) Set Locale Constructor Usage $validator = new Laminas\\I18n\\Validator\\DateTime(['locale' =&gt; 'de']); var_dump($validator-&gt;isValid('29.02.2020')); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\DateTime(); $validator-&gt;setLocale('de'); var_dump($validator-&gt;isValid('29.02.2020')); // true Get Current Value To get the current value of this option, use the getLocale() method. $validator = new Laminas\\I18n\\Validator\\DateTime(['locale' =&gt; 'en_US']); echo $validator-&gt;getLocale(); // 'en_US' Default Value By default, if no locale is provided, DateTime will use the system locale provided by PHP's Locale::getDefault() . Define Custom Pattern Constructor Usage $validator = new Laminas\\I18n\\Validator\\DateTime(['pattern' =&gt; 'yyyy-MM-DD']); var_dump($validator-&gt;isValid('2019-02-28')); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\DateTime(); $validator-&gt;setPattern('yyyy-MM-DD'); var_dump($validator-&gt;isValid('2019-02-28')); // true Possible patterns are documented at http://userguide.icu-project.org/formatparse/datetime . Get Current Value To get the current value of this option, use the getPattern() method. $validator = new Laminas\\I18n\\Validator\\DateTime(['pattern' =&gt; 'yyyy-MM-DD']); echo $validator-&gt;getPattern(); // 'yyyy-MM-DD' Default Value The default value of this option is null . Using Date Type Constructor Usage $validator = new Laminas\\I18n\\Validator\\DateTime(['date_type' =&gt; IntlDateFormatter::MEDIUM]); var_dump($validator-&gt;isValid('Feb 28, 2020')); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\DateTime(); $validator-&gt;setDateType(IntlDateFormatter::MEDIUM); var_dump($validator-&gt;isValid('Feb 28, 2020')); // true Possible values for the date type option are the following constants of PHP's IntlDateFormatter class : IntlDateFormatter::NONE - Do not include this element IntlDateFormatter::FULL - Fullstyle (Tuesday, April 12, 1952 AD) IntlDateFormatter::LONG - Long style (January 12, 1952) IntlDateFormatter::MEDIUM - Medium style (Jan 12, 1952) IntlDateFormatter::SHORT - Short style (12/13/52) Get Current Value To get the current value of this option, use the getDateType() method. $validator = new Laminas\\I18n\\Validator\\DateTime(['date_type' =&gt; IntlDateFormatter::MEDIUM]); echo $validator-&gt;getDateType(); // 'MMM d, y' (IntlDateFormatter::MEDIUM) Default Value The default value of this option is IntlDateFormatter::NONE . Using Time Type Sets time type to use (none, short, medium, long, full). Constructor Usage $validator = new Laminas\\I18n\\Validator\\DateTime(['time_type' =&gt; IntlDateFormatter::MEDIUM]); var_dump($validator-&gt;isValid('8:05:40 pm')); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\DateTime(); $validator-&gt;setTimeType(IntlDateFormatter::MEDIUM); var_dump($validator-&gt;isValid('8:05:40 pm')); // true Possible values for the date type option are the following constants of PHP's IntlDateFormatter class : IntlDateFormatter::NONE - Do not include this element IntlDateFormatter::FULL - Fullstyle (3:30:42pm PST) IntlDateFormatter::LONG - Long style (3:30:32pm) IntlDateFormatter::MEDIUM - Medium style (3:30:32pm) IntlDateFormatter::SHORT - Short style (3:30pm) Get Current Value To get the current value of this option, use the getTimeType() method. $validator = new Laminas\\I18n\\Validator\\DateTime(['time_type' =&gt; IntlDateFormatter::MEDIUM]); echo $validator-&gt;getTimeType(); // 'h:mm:ss a' (IntlDateFormatter::MEDIUM) Default Value The default value of this option is IntlDateFormatter::NONE . Using Calendar To demonstrate the calendar option, additional settings are needed. Constructor Usage $validator = new Laminas\\I18n\\Validator\\DateTime([ 'calendar' =&gt; IntlDateFormatter::TRADITIONAL, 'date_type' =&gt; IntlDateFormatter::MEDIUM, 'locale' =&gt; 'de_DE@calendar=buddhist', 'timezone' =&gt; 'Europe/Berlin', ]); var_dump($validator-&gt;isValid('28.02.2562 BE')); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\DateTime(); $validator-&gt;setCalendar(IntlDateFormatter::TRADITIONAL); $validator-&gt;setDateType(IntlDateFormatter::MEDIUM); $validator-&gt;setLocale('de_DE@calendar=buddhist'); $validator-&gt;setTimezone('Europe/Berlin'); var_dump($validator-&gt;isValid('28.02.2562 BE')); // true Possible values for the calendar option are the following constants of PHP's IntlDateFormatter class : IntlDateFormatter::TRADITIONAL - Non-Gregorian Calendar IntlDateFormatter::GREGORIAN - Gregorian Calendar Get Current Value To get the current value of this option, use the getCalendar() method. $validator = new Laminas\\I18n\\Validator\\DateTime(['calendar' =&gt; IntlDateFormatter::TRADITIONAL]); echo $validator-&gt;getCalendar(); // '0' (IntlDateFormatter::TRADITIONAL) Default Value The default value of this option is IntlDateFormatter::GREGORIAN . Using Timezone Constructor Usage $validator = new Laminas\\I18n\\Validator\\DateTime(['timezone' =&gt; 'Europe/London']); var_dump($validator-&gt;isValid('20190228 10:00 pm')); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\DateTime(); $validator-&gt;setTimezone('Europe/London'); var_dump($validator-&gt;isValid('20190228 10:00 pm')); // true Get Current Value To get the current value of this option, use the getTimezone() method. $validator = new Laminas\\I18n\\Validator\\DateTime(['timezone' =&gt; 'Europe/London']); echo $validator-&gt;getTimezone(); // 'Europe/London' Default Value By default, if no timezone is provided, DateTime will use the system timezone provided by PHP's date_default_timezone_get() .","title":"DateTime"},{"location":"validators/date-time/#datetime","text":"Laminas\\I18n\\Validator\\DateTime allows you to determine if a given value is a valid date, time or datetime . Internally, PHP's IntlDateFormatter tries to create a date time for the given value and locale.","title":"DateTime"},{"location":"validators/date-time/#basic-usage","text":"$validator = new Laminas\\I18n\\Validator\\DateTime(); var_dump($validator-&gt;isValid('20190228 10:00 pm')); // true var_dump($validator-&gt;isValid('20190229 10:00 pm')); // false var_dump($validator-&gt;isValid('20200229 10:00 pm')); // true By default, if no locale is provided, DateTime will use the system locale provided by PHP's Locale::getDefault() and the default timezone provided by PHP's date_default_timezone_get . (The above example assumes that the environment locale is set to en_EN and the timezone is set to Europe/London .)","title":"Basic Usage"},{"location":"validators/date-time/#set-locale","text":"Constructor Usage $validator = new Laminas\\I18n\\Validator\\DateTime(['locale' =&gt; 'de']); var_dump($validator-&gt;isValid('29.02.2020')); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\DateTime(); $validator-&gt;setLocale('de'); var_dump($validator-&gt;isValid('29.02.2020')); // true","title":"Set Locale"},{"location":"validators/date-time/#define-custom-pattern","text":"Constructor Usage $validator = new Laminas\\I18n\\Validator\\DateTime(['pattern' =&gt; 'yyyy-MM-DD']); var_dump($validator-&gt;isValid('2019-02-28')); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\DateTime(); $validator-&gt;setPattern('yyyy-MM-DD'); var_dump($validator-&gt;isValid('2019-02-28')); // true Possible patterns are documented at http://userguide.icu-project.org/formatparse/datetime .","title":"Define Custom Pattern"},{"location":"validators/date-time/#using-date-type","text":"Constructor Usage $validator = new Laminas\\I18n\\Validator\\DateTime(['date_type' =&gt; IntlDateFormatter::MEDIUM]); var_dump($validator-&gt;isValid('Feb 28, 2020')); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\DateTime(); $validator-&gt;setDateType(IntlDateFormatter::MEDIUM); var_dump($validator-&gt;isValid('Feb 28, 2020')); // true Possible values for the date type option are the following constants of PHP's IntlDateFormatter class : IntlDateFormatter::NONE - Do not include this element IntlDateFormatter::FULL - Fullstyle (Tuesday, April 12, 1952 AD) IntlDateFormatter::LONG - Long style (January 12, 1952) IntlDateFormatter::MEDIUM - Medium style (Jan 12, 1952) IntlDateFormatter::SHORT - Short style (12/13/52)","title":"Using Date Type"},{"location":"validators/date-time/#using-time-type","text":"Sets time type to use (none, short, medium, long, full). Constructor Usage $validator = new Laminas\\I18n\\Validator\\DateTime(['time_type' =&gt; IntlDateFormatter::MEDIUM]); var_dump($validator-&gt;isValid('8:05:40 pm')); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\DateTime(); $validator-&gt;setTimeType(IntlDateFormatter::MEDIUM); var_dump($validator-&gt;isValid('8:05:40 pm')); // true Possible values for the date type option are the following constants of PHP's IntlDateFormatter class : IntlDateFormatter::NONE - Do not include this element IntlDateFormatter::FULL - Fullstyle (3:30:42pm PST) IntlDateFormatter::LONG - Long style (3:30:32pm) IntlDateFormatter::MEDIUM - Medium style (3:30:32pm) IntlDateFormatter::SHORT - Short style (3:30pm)","title":"Using Time Type"},{"location":"validators/date-time/#using-calendar","text":"To demonstrate the calendar option, additional settings are needed. Constructor Usage $validator = new Laminas\\I18n\\Validator\\DateTime([ 'calendar' =&gt; IntlDateFormatter::TRADITIONAL, 'date_type' =&gt; IntlDateFormatter::MEDIUM, 'locale' =&gt; 'de_DE@calendar=buddhist', 'timezone' =&gt; 'Europe/Berlin', ]); var_dump($validator-&gt;isValid('28.02.2562 BE')); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\DateTime(); $validator-&gt;setCalendar(IntlDateFormatter::TRADITIONAL); $validator-&gt;setDateType(IntlDateFormatter::MEDIUM); $validator-&gt;setLocale('de_DE@calendar=buddhist'); $validator-&gt;setTimezone('Europe/Berlin'); var_dump($validator-&gt;isValid('28.02.2562 BE')); // true Possible values for the calendar option are the following constants of PHP's IntlDateFormatter class : IntlDateFormatter::TRADITIONAL - Non-Gregorian Calendar IntlDateFormatter::GREGORIAN - Gregorian Calendar","title":"Using Calendar"},{"location":"validators/date-time/#using-timezone","text":"Constructor Usage $validator = new Laminas\\I18n\\Validator\\DateTime(['timezone' =&gt; 'Europe/London']); var_dump($validator-&gt;isValid('20190228 10:00 pm')); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\DateTime(); $validator-&gt;setTimezone('Europe/London'); var_dump($validator-&gt;isValid('20190228 10:00 pm')); // true","title":"Using Timezone"},{"location":"validators/introduction/","text":"Introduction laminas-i18n provides a set of validators that use internationalization capabilities. Alnum Alpha CountryCode DateTime IsFloat IsInt PhoneNumber PostCode These validators are based on Laminas component for validation of data and files: laminas-validator . The documentation of laminas-validator also describes the translate of the validation messages . Installation Requirements The validation support of laminas-i18n depends on the laminas-validator component, so be sure to have it installed before getting started: $ composer require laminas/laminas-validator","title":"Introduction"},{"location":"validators/introduction/#introduction","text":"laminas-i18n provides a set of validators that use internationalization capabilities. Alnum Alpha CountryCode DateTime IsFloat IsInt PhoneNumber PostCode These validators are based on Laminas component for validation of data and files: laminas-validator . The documentation of laminas-validator also describes the translate of the validation messages . Installation Requirements The validation support of laminas-i18n depends on the laminas-validator component, so be sure to have it installed before getting started: $ composer require laminas/laminas-validator","title":"Introduction"},{"location":"validators/is-float/","text":"IsFloat Laminas\\I18n\\Validator\\IsFloat allows you to validate if a given value contains a floating-point value . This validator takes into account localized input. Float values are often written differently based on the country or region. For example, using English, you might write 1.5 , whereas in german you would write 1,5 , and in other languages you might use grouping. Laminas\\I18n\\Validator\\IsFloat is able to validate such notations. However, it is limited to the locale you set. Internally, PHP's NumberFormatter ( ext/intl ) tries to create a formatted number for the given value and locale. Basic Usage $validator = new Laminas\\I18n\\Validator\\IsFloat(); $validator-&gt;isValid(1234.5); // true $validator-&gt;isValid('10a01'); // false $validator-&gt;isValid('1,234.5'); // true By default, if no locale is provided, IsFloat will use the system locale provided by PHP's Locale class and the getDefault() method. (The above example assumes that the environment locale is set to en .) Using a notation not specific to the locale results in a false evaluation. Using Locale Constructor Usage $validator = new Laminas\\I18n\\Validator\\IsFloat(['locale' =&gt; 'en_US']); $validator-&gt;isValid(1234.5); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\IsFloat(); $validator-&gt;setLocale('en_US'); $validator-&gt;isValid(1234.5); // true Locale Class Usage Locale::setDefault('en_US'); $validator = new Laminas\\I18n\\Validator\\IsFloat(); $validator-&gt;isValid(1234.5); // true Get Current Value To get the current value of this option, use the getLocale() method. $validator = new Laminas\\I18n\\Validator\\IsFloat(['locale' =&gt; 'en_US']); echo $validator-&gt;getLocale(); // 'en_US' Default Value By default, if no locale is provided, IsFloat will use the system locale provided by PHP's Locale::getDefault() .","title":"IsFloat"},{"location":"validators/is-float/#isfloat","text":"Laminas\\I18n\\Validator\\IsFloat allows you to validate if a given value contains a floating-point value . This validator takes into account localized input. Float values are often written differently based on the country or region. For example, using English, you might write 1.5 , whereas in german you would write 1,5 , and in other languages you might use grouping. Laminas\\I18n\\Validator\\IsFloat is able to validate such notations. However, it is limited to the locale you set. Internally, PHP's NumberFormatter ( ext/intl ) tries to create a formatted number for the given value and locale.","title":"IsFloat"},{"location":"validators/is-float/#basic-usage","text":"$validator = new Laminas\\I18n\\Validator\\IsFloat(); $validator-&gt;isValid(1234.5); // true $validator-&gt;isValid('10a01'); // false $validator-&gt;isValid('1,234.5'); // true By default, if no locale is provided, IsFloat will use the system locale provided by PHP's Locale class and the getDefault() method. (The above example assumes that the environment locale is set to en .) Using a notation not specific to the locale results in a false evaluation.","title":"Basic Usage"},{"location":"validators/is-float/#using-locale","text":"Constructor Usage $validator = new Laminas\\I18n\\Validator\\IsFloat(['locale' =&gt; 'en_US']); $validator-&gt;isValid(1234.5); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\IsFloat(); $validator-&gt;setLocale('en_US'); $validator-&gt;isValid(1234.5); // true Locale Class Usage Locale::setDefault('en_US'); $validator = new Laminas\\I18n\\Validator\\IsFloat(); $validator-&gt;isValid(1234.5); // true","title":"Using Locale"},{"location":"validators/is-int/","text":"IsInt Laminas\\I18n\\Validator\\IsInt validates if a given value is an integer , using the locale provided. Integer values are often written differently based on country or region. For example, using English, you may write 1234 or 1,234 ; both are integer values, but the grouping is optional. In German, you'd write 1.234 , and in French, 1 234 . Laminas\\I18n\\Validator\\IsInt will use a provided locale when evaluating the validity of an integer value. In such cases, it doesn't simply strip the separator, but instead validates that the correct separator as defined by used locale. Internally, PHP's NumberFormatter ( ext/intl ) tries to create a formatted number for the given value and locale. Basic Usage $validator = new Laminas\\I18n\\Validator\\IsInt(); $validator-&gt;isValid(1234); // returns true $validator-&gt;isValid(1234.5); // returns false $validator-&gt;isValid('1,234'); // returns true By default, if no locale is provided, IsInt will use the system locale provided by PHP's Locale class and the getDefault() method. (The above example assumes that the environment locale is set to en .) Using a notation not specific to the locale results in a false evaulation. Using Locale Constructor Usage $validator = new Laminas\\I18n\\Validator\\IsInt(['locale' =&gt; 'en_US']); $validator-&gt;isValid(1234); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\IsInt(); $validator-&gt;setLocale('en_US'); $validator-&gt;isValid(1234); // true Locale Class Usage Locale::setDefault('en_US'); $validator = new Laminas\\I18n\\Validator\\IsInt(); $validator-&gt;isValid(1234); // true Get Current Value To get the current value of this option, use the getLocale() method. $validator = new Laminas\\I18n\\Validator\\IsInt(['locale' =&gt; 'en_US']); echo $validator-&gt;getLocale(); // 'en_US' Default Value By default, if no locale is provided, IsInt will use the system locale provided by PHP's Locale::getDefault() . Strict Validation By default, the value's data type is not enforced. Default (Without Strict) $validator = new Laminas\\I18n\\Validator\\IsInt(); $validator-&gt;isValid(1234); // true $validator-&gt;isValid('1234'); // true To enforced a strict validation set the strict option to true . Constructor Usage $validator = new Laminas\\I18n\\Validator\\IsInt(['strict' =&gt; true]); $validator-&gt;isValid(1234); // true $validator-&gt;isValid('1234'); // false Setter Usage $validator = new Laminas\\I18n\\Validator\\IsInt(); $validator-&gt;setStrict(true) $validator-&gt;isValid(1234); // true $validator-&gt;isValid('1234'); // false Get Current Value To get the current value of this option, use the getStrict() method. $validator = new Laminas\\I18n\\Validator\\IsInt(['strict' =&gt; true]); echo $validator-&gt;getStrict(); // true Default Value The default value of this option is false .","title":"IsInt"},{"location":"validators/is-int/#isint","text":"Laminas\\I18n\\Validator\\IsInt validates if a given value is an integer , using the locale provided. Integer values are often written differently based on country or region. For example, using English, you may write 1234 or 1,234 ; both are integer values, but the grouping is optional. In German, you'd write 1.234 , and in French, 1 234 . Laminas\\I18n\\Validator\\IsInt will use a provided locale when evaluating the validity of an integer value. In such cases, it doesn't simply strip the separator, but instead validates that the correct separator as defined by used locale. Internally, PHP's NumberFormatter ( ext/intl ) tries to create a formatted number for the given value and locale.","title":"IsInt"},{"location":"validators/is-int/#basic-usage","text":"$validator = new Laminas\\I18n\\Validator\\IsInt(); $validator-&gt;isValid(1234); // returns true $validator-&gt;isValid(1234.5); // returns false $validator-&gt;isValid('1,234'); // returns true By default, if no locale is provided, IsInt will use the system locale provided by PHP's Locale class and the getDefault() method. (The above example assumes that the environment locale is set to en .) Using a notation not specific to the locale results in a false evaulation.","title":"Basic Usage"},{"location":"validators/is-int/#using-locale","text":"Constructor Usage $validator = new Laminas\\I18n\\Validator\\IsInt(['locale' =&gt; 'en_US']); $validator-&gt;isValid(1234); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\IsInt(); $validator-&gt;setLocale('en_US'); $validator-&gt;isValid(1234); // true Locale Class Usage Locale::setDefault('en_US'); $validator = new Laminas\\I18n\\Validator\\IsInt(); $validator-&gt;isValid(1234); // true","title":"Using Locale"},{"location":"validators/is-int/#strict-validation","text":"By default, the value's data type is not enforced. Default (Without Strict) $validator = new Laminas\\I18n\\Validator\\IsInt(); $validator-&gt;isValid(1234); // true $validator-&gt;isValid('1234'); // true To enforced a strict validation set the strict option to true . Constructor Usage $validator = new Laminas\\I18n\\Validator\\IsInt(['strict' =&gt; true]); $validator-&gt;isValid(1234); // true $validator-&gt;isValid('1234'); // false Setter Usage $validator = new Laminas\\I18n\\Validator\\IsInt(); $validator-&gt;setStrict(true) $validator-&gt;isValid(1234); // true $validator-&gt;isValid('1234'); // false","title":"Strict Validation"},{"location":"validators/phone-number/","text":"PhoneNumber Laminas\\I18n\\Validator\\PhoneNumber allows you to determine if a given value is a valid phone number . Phone numbers are specific to country codes. Basic Usage $validator = new Laminas\\I18n\\Validator\\PhoneNumber(); var_dump($validator-&gt;isValid('+4930123456')); // true By default, if no country code is provided, PhoneNumber will use the system locale provided by PHP's Locale::getDefault() and Locale::getRegion() to extract the country code. (The above example assumes that the environment locale is set to de_DE .) Using Country The ISO 3611 country code can be set for validations. Constructor Usage $validator = new Laminas\\I18n\\Validator\\PhoneNumber(['country' =&gt; 'DE']); var_dump($validator-&gt;isValid('+4930123456')); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\PhoneNumber(); $validator-&gt;setCountry('DE'); var_dump($validator-&gt;isValid('+4930123456')); // true Locale Class Usage Locale::setDefault('de_DE'); $validator = new Laminas\\I18n\\Validator\\PhoneNumber(); var_dump($validator-&gt;isValid('+4930123456')); // true Get Current Value To get the current value of this option, use the getCountry() method. $validator = new Laminas\\I18n\\Validator\\PhoneNumber(['country' =&gt; 'US']); echo $validator-&gt;getCountry(); // 'US' Default Value By default, if no country is provided, PhoneNumber will use the system locale provided by PHP's Locale::getDefault() and Locale::getRegion() to extract the region code. Using Allowed Phone Number Patterns Constructor Usage $validator = new Laminas\\I18n\\Validator\\PhoneNumber([ 'allowed_types' =&gt; ['emergency'], 'country' =&gt; 'US', ]); var_dump($validator-&gt;isValid(911)); // true var_dump($validator-&gt;isValid(999)); // false Setter Usage $validator = new Laminas\\I18n\\Validator\\PhoneNumber(); $validator-&gt;allowedTypes(['emergency']); $validator-&gt;setCountry('US'); var_dump($validator-&gt;isValid(911)); // true var_dump($validator-&gt;isValid(999)); // false Possible values for allowed patterns are: emergency fixed general mobile pager personal premium shared shortcode tollfree uan voicemail voip All Allowed Patterns The complete list of allowed patterns is not available for each country code. Please check the file for your country code with the supported types in the laminas-i18n repository on GitHub or in the vendor/laminas/laminas-i18n/src/Validator/PhoneNumber directory of your project folder. Get Current Value To get the current value of this option, use the allowedTypes() method with the value null . $validator = new Laminas\\I18n\\Validator\\PhoneNumber(['allowed_types' =&gt; ['emergency']]); var_dump($validator-&gt;allowedTypes()); // ['emergency'] Default Value The following phone number patterns are allowed per default: fixed general mobile personal tollfree uan voip Strict Validation By default, the phone numbers are validated against strict number patterns. To allow validation with all possible phone numbers, the allow_possible option can be used. Constructor Usage $validator = new Laminas\\I18n\\Validator\\PhoneNumber([ 'allow_possible' =&gt; true, 'allowed_types' =&gt; ['emergency'], 'country' =&gt; 'US', ]); var_dump($validator-&gt;isValid(911)); // true var_dump($validator-&gt;isValid(999)); // true var_dump($validator-&gt;isValid(9999)); // false Setter Usage $validator = new Laminas\\I18n\\Validator\\PhoneNumber(); $validator-&gt;allowPossible(true); $validator-&gt;allowedTypes(['emergency']); $validator-&gt;setCountry('US'); var_dump($validator-&gt;isValid(911)); // true var_dump($validator-&gt;isValid(999)); // true var_dump($validator-&gt;isValid(9999)); // false Get Current Value To get the current value of this option, use the allowPossible() method with the value null . $validator = new Laminas\\I18n\\Validator\\PhoneNumber(['allow_possible' =&gt; true]); var_dump($validator-&gt;allowPossible()); // true Default Value The default value of this option is false . Specify Country Code on Validation The country code can be specified with the context parameter on the isValid method. This allows to validate phone numbers for different country codes with the same validator instance without the usage of the setCountry() method. $validator = new Laminas\\I18n\\Validator\\PhoneNumber([ 'country' =&gt; 'country-code', // Defines a placeholder ]); var_dump($validator-&gt;isValid('+37067811268', ['country-code' =&gt; 'LT'])); // true var_dump($validator-&gt;isValid('+37067811268', ['country-code' =&gt; 'DE'])); // false var_dump($validator-&gt;isValid('+37067811268', ['country-code' =&gt; 'US'])); // false","title":"PhoneNumber"},{"location":"validators/phone-number/#phonenumber","text":"Laminas\\I18n\\Validator\\PhoneNumber allows you to determine if a given value is a valid phone number . Phone numbers are specific to country codes.","title":"PhoneNumber"},{"location":"validators/phone-number/#basic-usage","text":"$validator = new Laminas\\I18n\\Validator\\PhoneNumber(); var_dump($validator-&gt;isValid('+4930123456')); // true By default, if no country code is provided, PhoneNumber will use the system locale provided by PHP's Locale::getDefault() and Locale::getRegion() to extract the country code. (The above example assumes that the environment locale is set to de_DE .)","title":"Basic Usage"},{"location":"validators/phone-number/#using-country","text":"The ISO 3611 country code can be set for validations. Constructor Usage $validator = new Laminas\\I18n\\Validator\\PhoneNumber(['country' =&gt; 'DE']); var_dump($validator-&gt;isValid('+4930123456')); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\PhoneNumber(); $validator-&gt;setCountry('DE'); var_dump($validator-&gt;isValid('+4930123456')); // true Locale Class Usage Locale::setDefault('de_DE'); $validator = new Laminas\\I18n\\Validator\\PhoneNumber(); var_dump($validator-&gt;isValid('+4930123456')); // true","title":"Using Country"},{"location":"validators/phone-number/#using-allowed-phone-number-patterns","text":"Constructor Usage $validator = new Laminas\\I18n\\Validator\\PhoneNumber([ 'allowed_types' =&gt; ['emergency'], 'country' =&gt; 'US', ]); var_dump($validator-&gt;isValid(911)); // true var_dump($validator-&gt;isValid(999)); // false Setter Usage $validator = new Laminas\\I18n\\Validator\\PhoneNumber(); $validator-&gt;allowedTypes(['emergency']); $validator-&gt;setCountry('US'); var_dump($validator-&gt;isValid(911)); // true var_dump($validator-&gt;isValid(999)); // false Possible values for allowed patterns are: emergency fixed general mobile pager personal premium shared shortcode tollfree uan voicemail voip All Allowed Patterns The complete list of allowed patterns is not available for each country code. Please check the file for your country code with the supported types in the laminas-i18n repository on GitHub or in the vendor/laminas/laminas-i18n/src/Validator/PhoneNumber directory of your project folder.","title":"Using Allowed Phone Number Patterns"},{"location":"validators/phone-number/#strict-validation","text":"By default, the phone numbers are validated against strict number patterns. To allow validation with all possible phone numbers, the allow_possible option can be used. Constructor Usage $validator = new Laminas\\I18n\\Validator\\PhoneNumber([ 'allow_possible' =&gt; true, 'allowed_types' =&gt; ['emergency'], 'country' =&gt; 'US', ]); var_dump($validator-&gt;isValid(911)); // true var_dump($validator-&gt;isValid(999)); // true var_dump($validator-&gt;isValid(9999)); // false Setter Usage $validator = new Laminas\\I18n\\Validator\\PhoneNumber(); $validator-&gt;allowPossible(true); $validator-&gt;allowedTypes(['emergency']); $validator-&gt;setCountry('US'); var_dump($validator-&gt;isValid(911)); // true var_dump($validator-&gt;isValid(999)); // true var_dump($validator-&gt;isValid(9999)); // false","title":"Strict Validation"},{"location":"validators/phone-number/#specify-country-code-on-validation","text":"The country code can be specified with the context parameter on the isValid method. This allows to validate phone numbers for different country codes with the same validator instance without the usage of the setCountry() method. $validator = new Laminas\\I18n\\Validator\\PhoneNumber([ 'country' =&gt; 'country-code', // Defines a placeholder ]); var_dump($validator-&gt;isValid('+37067811268', ['country-code' =&gt; 'LT'])); // true var_dump($validator-&gt;isValid('+37067811268', ['country-code' =&gt; 'DE'])); // false var_dump($validator-&gt;isValid('+37067811268', ['country-code' =&gt; 'US'])); // false","title":"Specify Country Code on Validation"},{"location":"validators/post-code/","text":"PostCode Laminas\\I18n\\Validator\\PostCode allows you to determine if a given value is a valid postal code . Postal codes are specific to cities, and in some locales termed ZIP codes. Laminas\\I18n\\Validator\\PostCode knows more than 160 different postal code formats. To select the correct format there are two ways. You can either use a fully qualified locale, or you can set your own format manually. Basic Usage $validator = new Laminas\\I18n\\Validator\\PostCode(); var_dump($validator-&gt;isValid(1010)); // true By default, if no country code is provided, PostCode will use the system locale provided by PHP's Locale::getDefault() and Locale::getRegion() to extract the region code. (The above example assumes that the environment locale is set to de_AT .) Using Locale Using a locale is more convenient as laminas-validator already knows the appropriate postal code format for each locale; however, you need to use the fully qualified locale (one containing a region specifier) to do so. For instance, the locale de is a locale but could not be used with Laminas\\I18n\\Validator\\PostCode as it does not include the region; de_AT , however, would be a valid locale, as it specifies the region code ( AT , for Austria). Constructor Usage $validator = new Laminas\\I18n\\Validator\\PostCode(['locale' =&gt; 'de_AT']); var_dump($validator-&gt;isValid(1010)); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\PostCode(); $validator-&gt;setLocale('de_AT'); $validator-&gt;isValid(1010); // true Locale Class Usage Locale::setDefault('de_AT'); $validator = new Laminas\\I18n\\Validator\\PostCode(); var_dump($validator-&gt;isValid(1010)); // true Get Current Value To get the current value of this option, use the getLocale() method. $validator = new Laminas\\I18n\\Validator\\PostCode(['locale' =&gt; 'de_AT']); echo $validator-&gt;getLocale(); // 'de_AT' Default Value By default, if no locale is provided, PostCode will use the system locale provided by PHP's Locale::getDefault() and Locale::getRegion() to extract the region code. Using Custom Format Postal code formats are regular expression strings. When the international postal code format, which is used by setting the locale, does not fit your needs, then you can also manually set a format by calling setFormat() . Constructor Usage $validator = new Laminas\\I18n\\Validator\\PostCode(['format' =&gt; 'AT-\\d{4}']); var_dump($validator-&gt;isValid('AT-1010')); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\PostCode(); $validator-&gt;setFormat('AT-\\d{4}'); var_dump($validator-&gt;isValid('AT-1010')); // true Conventions for self defined Formats When using self defined formats, you should omit the regex delimiters and anchors ( '/^' and '$/' ). They are attached automatically. You should also be aware that postcode values will always be validated in a strict way. This means that they have to be written standalone without additional characters when they are not covered by the format. Get Current Value To get the current value of this option, use the getLocale() method. $validator = new Laminas\\I18n\\Validator\\PostCode(['format' =&gt; 'AT-\\d{4}']); echo $validator-&gt;getFormat(); // 'AT-\\d{4}' Default Value The default value of this option is null . Using Callback Service The PostCode validator allows additional validations via an optional service callback. The callback runs before the standard validation of the PostCode class. Internally, the additional validation is done by laminas-validator's Callback class. Constructor Usage $validator = new Laminas\\I18n\\Validator\\PostCode([ 'service' =&gt; static function ($value) { // Allow only certain districts in town if (in_array($value, range(1010, 1423), false)) { return true; } return false; }, 'locale' =&gt; 'de_AT', ]); var_dump($validator-&gt;isValid(1010)); // true var_dump($validator-&gt;isValid(1600)); // false Setter Usage $validator = new Laminas\\I18n\\Validator\\PostCode(); $validator-&gt;setService(static function ($value) { // Allow only certain districts in town if (in_array($value, range(1010, 1423), false)) { return true; } return false; }); $validator-&gt;setLocale('de_AT'); var_dump($validator-&gt;isValid(1010)); // true var_dump($validator-&gt;isValid(1600)); // false Default Value The default value of this option is null .","title":"PostCode"},{"location":"validators/post-code/#postcode","text":"Laminas\\I18n\\Validator\\PostCode allows you to determine if a given value is a valid postal code . Postal codes are specific to cities, and in some locales termed ZIP codes. Laminas\\I18n\\Validator\\PostCode knows more than 160 different postal code formats. To select the correct format there are two ways. You can either use a fully qualified locale, or you can set your own format manually.","title":"PostCode"},{"location":"validators/post-code/#basic-usage","text":"$validator = new Laminas\\I18n\\Validator\\PostCode(); var_dump($validator-&gt;isValid(1010)); // true By default, if no country code is provided, PostCode will use the system locale provided by PHP's Locale::getDefault() and Locale::getRegion() to extract the region code. (The above example assumes that the environment locale is set to de_AT .)","title":"Basic Usage"},{"location":"validators/post-code/#using-locale","text":"Using a locale is more convenient as laminas-validator already knows the appropriate postal code format for each locale; however, you need to use the fully qualified locale (one containing a region specifier) to do so. For instance, the locale de is a locale but could not be used with Laminas\\I18n\\Validator\\PostCode as it does not include the region; de_AT , however, would be a valid locale, as it specifies the region code ( AT , for Austria). Constructor Usage $validator = new Laminas\\I18n\\Validator\\PostCode(['locale' =&gt; 'de_AT']); var_dump($validator-&gt;isValid(1010)); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\PostCode(); $validator-&gt;setLocale('de_AT'); $validator-&gt;isValid(1010); // true Locale Class Usage Locale::setDefault('de_AT'); $validator = new Laminas\\I18n\\Validator\\PostCode(); var_dump($validator-&gt;isValid(1010)); // true","title":"Using Locale"},{"location":"validators/post-code/#using-custom-format","text":"Postal code formats are regular expression strings. When the international postal code format, which is used by setting the locale, does not fit your needs, then you can also manually set a format by calling setFormat() . Constructor Usage $validator = new Laminas\\I18n\\Validator\\PostCode(['format' =&gt; 'AT-\\d{4}']); var_dump($validator-&gt;isValid('AT-1010')); // true Setter Usage $validator = new Laminas\\I18n\\Validator\\PostCode(); $validator-&gt;setFormat('AT-\\d{4}'); var_dump($validator-&gt;isValid('AT-1010')); // true","title":"Using Custom Format"},{"location":"validators/post-code/#using-callback-service","text":"The PostCode validator allows additional validations via an optional service callback. The callback runs before the standard validation of the PostCode class. Internally, the additional validation is done by laminas-validator's Callback class. Constructor Usage $validator = new Laminas\\I18n\\Validator\\PostCode([ 'service' =&gt; static function ($value) { // Allow only certain districts in town if (in_array($value, range(1010, 1423), false)) { return true; } return false; }, 'locale' =&gt; 'de_AT', ]); var_dump($validator-&gt;isValid(1010)); // true var_dump($validator-&gt;isValid(1600)); // false Setter Usage $validator = new Laminas\\I18n\\Validator\\PostCode(); $validator-&gt;setService(static function ($value) { // Allow only certain districts in town if (in_array($value, range(1010, 1423), false)) { return true; } return false; }); $validator-&gt;setLocale('de_AT'); var_dump($validator-&gt;isValid(1010)); // true var_dump($validator-&gt;isValid(1600)); // false","title":"Using Callback Service"},{"location":"view-helpers/country-code-data-list/","text":"CountryCodeDataList The CountryCodeDataList view helper can be used to render an HTML &lt;datalist&gt; element containing a list of ISO-3166 country codes with two-letter country codes and localised country names. Basic Usage echo $this-&gt;countryCodeDataList(); By default, the helper will output a datalist with labels in the systems default locale such as: &lt;datalist &gt; &lt;option value=\"AD\" label=\"Andorra\"&gt; &lt;option value=\"AE\" label=\"United&#x20;Arab&#x20;Emirates\"&gt; &lt;option value=\"AF\" label=\"Afghanistan\"&gt; &lt;option value=\"AG\" label=\"Antigua&#x20;&amp;&#x20;Barbuda\"&gt; &lt;!-- â€¦more itemsâ€¦ --&gt; &lt;/datalist&gt; Customising Output Override the Locale at Runtime The first, optional argument to the helper is a locale string used to format the country names: echo $this-&gt;countryCodeDataList('de_DE'); // or just 'DE' Outputs: &lt;datalist&gt; &lt;option value=\"AD\" label=\"Andorra\"&gt; &lt;option value=\"AE\" label=\"Vereinigte&#x20;Arabische&#x20;Emirate\"&gt; &lt;option value=\"AF\" label=\"Afghanistan\"&gt; &lt;option value=\"AG\" label=\"Antigua&#x20;und&#x20;Barbuda\"&gt; &lt;!-- etcâ€¦ --&gt; &lt;/datalist&gt; Set HTML Attributes on the Data List You can provide HTML attributes to the second argument of the helper as an associative array. echo $this-&gt;countryCodeDataList(null, [ 'id' =&gt; 'country-codes', ]); // or just 'DE' Outputs: &lt;datalist id=\"country-codes\"&gt; &lt;option value=\"AD\" label=\"Andorra\"&gt; &lt;!-- etcâ€¦ --&gt; &lt;/datalist&gt; In order for the html data list to be used with a form input, you must target the list from the input using the list attribute . For example: $formElement = new Laminas\\Form\\Element\\Text('country'); $formElement-&gt;setAttribute('list', 'country-codes'); Restricting the List of Available Countries The CountryCodeListInterface Contract The helper's constructor accepts an object that implements Laminas\\I18n\\Geography\\CountryCodeListInterface . This interface has no specific methods other than those it inherits from IteratorAggregate and Countable . This object must be an iterable that yields a list of Laminas\\I18n\\CountryCode value objects. The default implementation of this interface, Laminas\\I18n\\Geography\\DefaultCountryCodeList provides a list of all known ISO-3166 codes. Overriding the List Once you have an implementation of CountryCodeListInterface that provides the list of countries that you require, the list must be made available to the view helper. This can be achieved in 2 ways: 1. A Custom Factory for the Helper In order to inject the list into the helper, you can set up a factory that replaces the view helpers default factory. Create a file for the factory e.g. module/MyModule/src/Factory/MyCountryDataListFactory.php with the following contents: namespace MyNameSpace; use Laminas\\Escaper\\Escaper; use Laminas\\I18n\\View\\Helper\\CountryCodeDataList; use Psr\\Container\\ContainerInterface; class MyCountryDataListFactory { public function __invoke(ContainerInterface $container): CountryCodeDataList { return new CountryCodeDataList( $container-&gt;get('ContainerIdForMyCountryCodeList'), new Escaper(), 'en_US', ); } } You would then configure your application config to register this factory for the helper. For example, in a laminas-mvc module, the file might be module/MyModule/config/module.config.php return [ 'view_helpers' =&gt; [ 'factories' =&gt; [ \\Laminas\\I18n\\View\\Helper\\CountryCodeDataList::class =&gt; \\MyNameSpace\\MyCountryDataListFactory::class, ], ], ]; 2. Override the List Itself in the DI Container Assuming your customised list is available in the DI container with the alias MyCountryList , modify your application configuration so that the list interface is aliased to your own implementation: Example configuration file path for a laminas-mvc module: module/MyModule/config/module.config.php return [ /** * 'service_manager' is the key used in a laminas-mvc application. * For a Mezzio application, the key would be 'dependencies' */ 'service_manager' =&gt; [ 'aliases' =&gt; [ \\Laminas\\I18n\\Geography\\CountryCodeListInterface::class =&gt; 'MyCountryList', ], ], ]; In the above scenario, the shipped factory for the view helper will inject your implementation of the country list into the view helper's constructor.","title":"CountryCodeDataList"},{"location":"view-helpers/country-code-data-list/#countrycodedatalist","text":"The CountryCodeDataList view helper can be used to render an HTML &lt;datalist&gt; element containing a list of ISO-3166 country codes with two-letter country codes and localised country names.","title":"CountryCodeDataList"},{"location":"view-helpers/country-code-data-list/#basic-usage","text":"echo $this-&gt;countryCodeDataList(); By default, the helper will output a datalist with labels in the systems default locale such as: &lt;datalist &gt; &lt;option value=\"AD\" label=\"Andorra\"&gt; &lt;option value=\"AE\" label=\"United&#x20;Arab&#x20;Emirates\"&gt; &lt;option value=\"AF\" label=\"Afghanistan\"&gt; &lt;option value=\"AG\" label=\"Antigua&#x20;&amp;&#x20;Barbuda\"&gt; &lt;!-- â€¦more itemsâ€¦ --&gt; &lt;/datalist&gt;","title":"Basic Usage"},{"location":"view-helpers/country-code-data-list/#customising-output","text":"","title":"Customising Output"},{"location":"view-helpers/country-code-data-list/#restricting-the-list-of-available-countries","text":"","title":"Restricting the List of Available Countries"},{"location":"view-helpers/currency-format/","text":"CurrencyFormat The CurrencyFormat view helper can be used to simplify rendering of localized currency values . It acts as a wrapper for the NumberFormatter class within the PHP's internationalization extension ( ext/intl ). Basic Usage echo $this-&gt;currencyFormat(1234.56, 'USD'); // '$1,234.56' By default, if no locale is provided, CurrencyFormat will use the system locale provided by PHP's Locale class and the getDefault() method. (The above example assumes that the environment locale is set to en_US .) Using Currency Code Invoke Usage echo $this-&gt;currencyFormat(1234.56, 'EUR'); // '1.234,56 â‚¬' Setter Usage $this-&gt;plugin('currencyFormat')-&gt;setCurrencyCode('EUR'); echo $this-&gt;currencyFormat(1234.56); // '1.234,56 â‚¬' (The above example assumes that the environment locale is set to de .) Get current Value To get the current value of this option, use the getCurrencyCode() method. $this-&gt;plugin('currencyFormat')-&gt;setCurrencyCode('USD'); echo $this-&gt;plugin('currencyFormat')-&gt;getCurrencyCode(); // 'USD' Default Value The default value of this option is null . Show or hide Decimals Invoke Usage echo $this-&gt;currencyFormat(1234.56, 'EUR', false); // '1.234 â‚¬' Setter Usage $this-&gt;plugin('currencyFormat')-&gt;setShouldShowDecimals(false); echo $this-&gt;currencyFormat(1234.56); // '1.234 â‚¬' (The above example assumes that the environment locale is set to de .) Get current Value To get the current value of this option, use the shouldShowDecimals() method. $this-&gt;plugin('currencyFormat')-&gt;setShouldShowDecimals(true); echo $this-&gt;plugin('currencyFormat')-&gt;shouldShowDecimals(); // true Default Value The default value of this option is null that means the decimals are showing. Using Locale Invoke Usage echo $this-&gt;currencyFormat(1234.56, 'EUR', null, 'de'); // '1.234,56 â‚¬' Setter Usage $this-&gt;plugin('currencyFormat')-&gt;setLocale('de'); echo $this-&gt;currencyFormat(1234.56, 'EUR'); // '1.234,56 â‚¬' Get current Value To get the current value of this option, use the getLocale() method. $this-&gt;plugin('currencyFormat')-&gt;setLocale('de'); echo $this-&gt;plugin('currencyFormat')-&gt;getLocale(); // 'de' Default Value By default, if no locale is provided, CurrencyFormat will use the system locale provided by PHP's Locale::getDefault() . Define custom Pattern Invoke Usage echo $this-&gt;currencyFormat(1234.56, 'EUR', null, 'de', '#0.# kg'); // '12345678,90 kg' Setter Usage $this-&gt;plugin('currencyformat')-&gt;setCurrencyPattern('#0.# kg'); echo $this-&gt;currencyFormat(1234.56, 'EUR'); // '12345678,90 kg' (The above example assumes that the environment locale is set to de .) Valid patterns are documented at ICU DecimalFormat ; see the NumberFormatter::setPattern documentation for more information. Get current Value To get the current value of this option, use the getCurrencyPattern() method. $this-&gt;plugin('currencyFormat')-&gt;setCurrencyPattern('#0.# kg'); echo $this-&gt;plugin('currencyFormat')-&gt;getCurrencyPattern(); // '#0.# kg' Default Value The default value of this option is null . Multiple Executions If the different options are set prior to formatting then it will be applied each time the helper is used. $this-&gt;plugin('currencyformat')-&gt;setCurrencyCode('USD')-&gt;setLocale('en_US'); echo $this-&gt;currencyFormat(1234.56); // '$1,234.56' echo $this-&gt;currencyFormat(5678.90); // '$5,678.90'","title":"CurrencyFormat"},{"location":"view-helpers/currency-format/#currencyformat","text":"The CurrencyFormat view helper can be used to simplify rendering of localized currency values . It acts as a wrapper for the NumberFormatter class within the PHP's internationalization extension ( ext/intl ).","title":"CurrencyFormat"},{"location":"view-helpers/currency-format/#basic-usage","text":"echo $this-&gt;currencyFormat(1234.56, 'USD'); // '$1,234.56' By default, if no locale is provided, CurrencyFormat will use the system locale provided by PHP's Locale class and the getDefault() method. (The above example assumes that the environment locale is set to en_US .)","title":"Basic Usage"},{"location":"view-helpers/currency-format/#using-currency-code","text":"Invoke Usage echo $this-&gt;currencyFormat(1234.56, 'EUR'); // '1.234,56 â‚¬' Setter Usage $this-&gt;plugin('currencyFormat')-&gt;setCurrencyCode('EUR'); echo $this-&gt;currencyFormat(1234.56); // '1.234,56 â‚¬' (The above example assumes that the environment locale is set to de .)","title":"Using Currency Code"},{"location":"view-helpers/currency-format/#show-or-hide-decimals","text":"Invoke Usage echo $this-&gt;currencyFormat(1234.56, 'EUR', false); // '1.234 â‚¬' Setter Usage $this-&gt;plugin('currencyFormat')-&gt;setShouldShowDecimals(false); echo $this-&gt;currencyFormat(1234.56); // '1.234 â‚¬' (The above example assumes that the environment locale is set to de .)","title":"Show or hide Decimals"},{"location":"view-helpers/currency-format/#using-locale","text":"Invoke Usage echo $this-&gt;currencyFormat(1234.56, 'EUR', null, 'de'); // '1.234,56 â‚¬' Setter Usage $this-&gt;plugin('currencyFormat')-&gt;setLocale('de'); echo $this-&gt;currencyFormat(1234.56, 'EUR'); // '1.234,56 â‚¬'","title":"Using Locale"},{"location":"view-helpers/currency-format/#define-custom-pattern","text":"Invoke Usage echo $this-&gt;currencyFormat(1234.56, 'EUR', null, 'de', '#0.# kg'); // '12345678,90 kg' Setter Usage $this-&gt;plugin('currencyformat')-&gt;setCurrencyPattern('#0.# kg'); echo $this-&gt;currencyFormat(1234.56, 'EUR'); // '12345678,90 kg' (The above example assumes that the environment locale is set to de .) Valid patterns are documented at ICU DecimalFormat ; see the NumberFormatter::setPattern documentation for more information.","title":"Define custom Pattern"},{"location":"view-helpers/currency-format/#multiple-executions","text":"If the different options are set prior to formatting then it will be applied each time the helper is used. $this-&gt;plugin('currencyformat')-&gt;setCurrencyCode('USD')-&gt;setLocale('en_US'); echo $this-&gt;currencyFormat(1234.56); // '$1,234.56' echo $this-&gt;currencyFormat(5678.90); // '$5,678.90'","title":"Multiple Executions"},{"location":"view-helpers/date-format/","text":"DateFormat The DateFormat view helper can be used to simplify rendering of localized date/time values . It acts as a wrapper for the IntlDateFormatter class within PHP's internationalization extension ( ext/intl ). Basic Usage The value for the date must be: an object which implements the DateTimeInterface , an IntlCalendar object, an integer representing a Unix timestamp value or an array in the format returned by localtime() function Example with a DateTime instance: echo $this-&gt;dateFormat(new DateTime()); // '20190222 09:07 PM' Example with an IntlCalendar instance: echo $this-&gt;dateFormat(IntlCalendar::createInstance()); // '20190222 09:07 PM' Example with an Unix timestamp: echo $this-&gt;dateFormat(1550870660); // '20190222 04:24 PM' Example with the format of localtime() : echo $this-&gt;dateFormat([ 'tm_sec' =&gt; 0, // seconds, 0 to 59 'tm_min' =&gt; 30, // minutes, 0 to 59 'tm_hour' =&gt; 12, // hours, 0 to 23 'tm_mday' =&gt; 5, // day of the month, 1 to 31 'tm_mon' =&gt; 4, // month of the year, 0 (Jan) to 11 (Dec) 'tm_year' =&gt; 119, // years since 1900 ]); // '20190505 12:30 PM' By default, if no locale is provided, DateFormat will use the system locale provided by PHP's Locale class and the getDefault() method. (The above example assumes that the environment locale is set to en_US .) More Examples Format date and time: echo $this-&gt;dateFormat( new DateTime(), IntlDateFormatter::MEDIUM, // Date IntlDateFormatter::MEDIUM // Time ); // 'Feb 22, 2019, 9:07:38 PM' Format only a date: echo $this-&gt;dateFormat( new DateTime(), IntlDateFormatter::LONG, // Date IntlDateFormatter::NONE // Time ); // 'Feb 22, 2019' Format only a time: echo $this-&gt;dateFormat( new DateTime(), IntlDateFormatter::NONE, // Date IntlDateFormatter::SHORT // Time ); // '9:07 PM' (The above examples assumes that the environment locale is set to en_US .) Using Date Type Sets date type to use (none, short, medium, long, full). echo $this-&gt;dateFormat(new DateTime(), IntlDateFormatter::MEDIUM); // 'Feb 22, 2019' (The above example assumes that the environment locale is set to en_US .) Possible values for the date type option are the following constants of PHP's IntlDateFormatter class : IntlDateFormatter::NONE - Do not include this element IntlDateFormatter::FULL - Fullstyle (Tuesday, April 12, 1952 AD) IntlDateFormatter::LONG - Long style (January 12, 1952) IntlDateFormatter::MEDIUM - Medium style (Jan 12, 1952) IntlDateFormatter::SHORT - Short style (12/13/52) Default Value The default value of this option is IntlDateFormatter::NONE . Using Time Type Sets time type to use (none, short, medium, long, full). echo $this-&gt;dateFormat(new DateTime(), IntlDateFormatter::NONE, IntlDateFormatter::MEDIUM); // '9:41:58 PM' (The above example assumes that the environment locale is set to en_US .) Possible values for the date type option are the following constants of PHP's IntlDateFormatter class : IntlDateFormatter::NONE - Do not include this element IntlDateFormatter::FULL - Fullstyle (3:30:42pm PST) IntlDateFormatter::LONG - Long style (3:30:32pm) IntlDateFormatter::MEDIUM - Medium style (3:30:32pm) IntlDateFormatter::SHORT - Short style (3:30pm) Default Value The default value of this option is IntlDateFormatter::NONE . Using Locale Invoke Usage echo $this-&gt;dateFormat(new DateTime(), null, null, 'de_DE'); // 'Freitag, 22. Februar 2019 um 21:16:37 GMT' Setter Usage $this-&gt;plugin('dateFormat')-&gt;setLocale('de_DE'); echo $this-&gt;dateFormat(new DateTime()); // 'Freitag, 22. Februar 2019 um 21:16:37 GMT' Locale Class Usage Locale::setDefault('de_DE'); echo $this-&gt;dateFormat(new DateTime()); // 'Freitag, 22. Februar 2019 um 21:16:37 GMT' Get current Value To get the current value of this option, use the getLocale() method. $this-&gt;plugin('dateFormat')-&gt;setLocale('en_US'); echo $this-&gt;plugin('dateFormat')-&gt;getLocale(); // 'en_US' Default Value By default, if no locale is provided, DateFormat will use the system locale provided by PHP's Locale::getDefault() . Using Timezone By default, the system's default timezone will be used when formatting. This overrides any timezone that may be set inside a DateTime object. To change the timezone when formatting, use the setTimezone() method. $this-&gt;plugin('dateFormat')-&gt;setTimezone('America/New_York'); echo $this-&gt;dateFormat(new DateTime(), null, null, 'en_US'); // 'Friday, February 22, 2019 at 4:20:21 PM Eastern Standard Time' Get current Value To get the current value of this option, use the getTimezone() method. $this-&gt;plugin('dateFormat')-&gt;setTimezone('America/New_York'); echo $this-&gt;plugin('dateFormat')-&gt;getTimezone(); // 'America/New_York' Default Value By default, if no timezone is provided, DateFormat will use the system timezone provided by PHP's date_default_timezone_get() .","title":"DateFormat"},{"location":"view-helpers/date-format/#dateformat","text":"The DateFormat view helper can be used to simplify rendering of localized date/time values . It acts as a wrapper for the IntlDateFormatter class within PHP's internationalization extension ( ext/intl ).","title":"DateFormat"},{"location":"view-helpers/date-format/#basic-usage","text":"The value for the date must be: an object which implements the DateTimeInterface , an IntlCalendar object, an integer representing a Unix timestamp value or an array in the format returned by localtime() function Example with a DateTime instance: echo $this-&gt;dateFormat(new DateTime()); // '20190222 09:07 PM' Example with an IntlCalendar instance: echo $this-&gt;dateFormat(IntlCalendar::createInstance()); // '20190222 09:07 PM' Example with an Unix timestamp: echo $this-&gt;dateFormat(1550870660); // '20190222 04:24 PM' Example with the format of localtime() : echo $this-&gt;dateFormat([ 'tm_sec' =&gt; 0, // seconds, 0 to 59 'tm_min' =&gt; 30, // minutes, 0 to 59 'tm_hour' =&gt; 12, // hours, 0 to 23 'tm_mday' =&gt; 5, // day of the month, 1 to 31 'tm_mon' =&gt; 4, // month of the year, 0 (Jan) to 11 (Dec) 'tm_year' =&gt; 119, // years since 1900 ]); // '20190505 12:30 PM' By default, if no locale is provided, DateFormat will use the system locale provided by PHP's Locale class and the getDefault() method. (The above example assumes that the environment locale is set to en_US .)","title":"Basic Usage"},{"location":"view-helpers/date-format/#using-date-type","text":"Sets date type to use (none, short, medium, long, full). echo $this-&gt;dateFormat(new DateTime(), IntlDateFormatter::MEDIUM); // 'Feb 22, 2019' (The above example assumes that the environment locale is set to en_US .) Possible values for the date type option are the following constants of PHP's IntlDateFormatter class : IntlDateFormatter::NONE - Do not include this element IntlDateFormatter::FULL - Fullstyle (Tuesday, April 12, 1952 AD) IntlDateFormatter::LONG - Long style (January 12, 1952) IntlDateFormatter::MEDIUM - Medium style (Jan 12, 1952) IntlDateFormatter::SHORT - Short style (12/13/52)","title":"Using Date Type"},{"location":"view-helpers/date-format/#using-time-type","text":"Sets time type to use (none, short, medium, long, full). echo $this-&gt;dateFormat(new DateTime(), IntlDateFormatter::NONE, IntlDateFormatter::MEDIUM); // '9:41:58 PM' (The above example assumes that the environment locale is set to en_US .) Possible values for the date type option are the following constants of PHP's IntlDateFormatter class : IntlDateFormatter::NONE - Do not include this element IntlDateFormatter::FULL - Fullstyle (3:30:42pm PST) IntlDateFormatter::LONG - Long style (3:30:32pm) IntlDateFormatter::MEDIUM - Medium style (3:30:32pm) IntlDateFormatter::SHORT - Short style (3:30pm)","title":"Using Time Type"},{"location":"view-helpers/date-format/#using-locale","text":"Invoke Usage echo $this-&gt;dateFormat(new DateTime(), null, null, 'de_DE'); // 'Freitag, 22. Februar 2019 um 21:16:37 GMT' Setter Usage $this-&gt;plugin('dateFormat')-&gt;setLocale('de_DE'); echo $this-&gt;dateFormat(new DateTime()); // 'Freitag, 22. Februar 2019 um 21:16:37 GMT' Locale Class Usage Locale::setDefault('de_DE'); echo $this-&gt;dateFormat(new DateTime()); // 'Freitag, 22. Februar 2019 um 21:16:37 GMT'","title":"Using Locale"},{"location":"view-helpers/date-format/#using-timezone","text":"By default, the system's default timezone will be used when formatting. This overrides any timezone that may be set inside a DateTime object. To change the timezone when formatting, use the setTimezone() method. $this-&gt;plugin('dateFormat')-&gt;setTimezone('America/New_York'); echo $this-&gt;dateFormat(new DateTime(), null, null, 'en_US'); // 'Friday, February 22, 2019 at 4:20:21 PM Eastern Standard Time'","title":"Using Timezone"},{"location":"view-helpers/introduction/","text":"Introduction laminas-i18n ships with a set of laminas-view helper classes related to internationalization. CountryCodeDataList CurrencyFormat DateFormat NumberFormat Plural Translate TranslatePlural These helpers are based on Laminas component for the view layer: laminas-view and their helpers . Installation Requirements The view-helper support of laminas-i18n depends on the laminas-view component, so be sure to have it installed before getting started: $ composer require laminas/laminas-view IDE Auto-Completion in Templates The Laminas\\I18n\\View\\HelperTrait trait can be used to provide auto-completion for modern IDEs. It defines the aliases of the view helpers in a DocBlock as @method tags. Usage In order to allow auto-completion in templates, $this variable should be type-hinted via a DocBlock at the top of a template. It is recommended that&gt; always the Laminas\\View\\Renderer\\PhpRenderer is added as the first type, so that the IDE can auto-suggest the default view helpers from laminas-view . The HelperTrait from laminas-i18n can be chained with a pipe symbol (a.k.a. vertical bar) | : /** * @var Laminas\\View\\Renderer\\PhpRenderer|Laminas\\I18n\\View\\HelperTrait $this */ The HelperTrait traits can be chained as many as needed, depending on which view helpers from the different Laminas component are used and where the auto-completion is to be made. Abstract Translator Helper The AbstractTranslatorHelper view helper is used as a base abstract class for any helpers that need to translate content. It provides an implementation for the Laminas\\I18n\\Translator\\TranslatorAwareInterface , allowing translator injection as well as text domain injection. Public Methods setTranslator() setTranslator(Translator $translator, string $textDomain = null) : void Sets the Laminas\\I18n\\Translator\\Translator instance to use in the helper. The $textDomain argument is optional, and provided as a convenienct to allow setting both the translator and text domain simultaneously. getTranslator() getTranslator() : Translator Returns the Laminas\\I18n\\Translator\\Translator instance used by the helper. hasTranslator() hasTranslator() : bool Returns true if the helper composes a Laminas\\I18n\\Translator\\Translator instance. setTranslatorEnabled() setTranslatorEnabled(bool $enabled) : void Sets whether or not translations are enabled. isTranslatorEnabled() isTranslatorEnabled() : bool Returns true if translations are enabled. setTranslatorTextDomain() setTranslatorTextDomain(string $textDomain) : void Sets the default translation text domain to use with the helper. getTranslatorTextDomain() getTranslatorTextDomain() : string Returns the current text domain used by the helper.","title":"Introduction"},{"location":"view-helpers/introduction/#introduction","text":"laminas-i18n ships with a set of laminas-view helper classes related to internationalization. CountryCodeDataList CurrencyFormat DateFormat NumberFormat Plural Translate TranslatePlural These helpers are based on Laminas component for the view layer: laminas-view and their helpers . Installation Requirements The view-helper support of laminas-i18n depends on the laminas-view component, so be sure to have it installed before getting started: $ composer require laminas/laminas-view IDE Auto-Completion in Templates The Laminas\\I18n\\View\\HelperTrait trait can be used to provide auto-completion for modern IDEs. It defines the aliases of the view helpers in a DocBlock as @method tags.","title":"Introduction"},{"location":"view-helpers/introduction/#abstract-translator-helper","text":"The AbstractTranslatorHelper view helper is used as a base abstract class for any helpers that need to translate content. It provides an implementation for the Laminas\\I18n\\Translator\\TranslatorAwareInterface , allowing translator injection as well as text domain injection.","title":"Abstract Translator Helper"},{"location":"view-helpers/number-format/","text":"NumberFormat The NumberFormat view helper can be used to simplify rendering of locale-specific number and/or percentage strings . It acts as a wrapper for the NumberFormatter class within PHP's internationalization extension ( ext/intl ). Basic Usage echo $this-&gt;numberFormat(1000); // '1,000' By default, if no locale is provided, NumberFormat will use the system locale provided by PHP's Locale class and the getDefault() method. (The above example assumes that the environment locale is set to en_US .) Using Format Style This option sets the style of the formatting; one of the NumberFormatter format style constants . Constructor Usage // Example 1 echo $this-&gt;numberFormat(0.8, NumberFormatter::PERCENT); // '80%' // Example 2 echo $this-&gt;numberFormat(0.00123456789, NumberFormatter::SCIENTIFIC); // '1,23456789E-3' Setter Usage // Example 1 $this-&gt;plugin('numberFormat')-&gt;setFormatStyle(NumberFormatter::PERCENT); echo $this-&gt;numberFormat(0.8); // '80%' // Example 2 $this-&gt;plugin('numberFormat')-&gt;setFormatStyle(NumberFormatter::SCIENTIFIC); echo $this-&gt;numberFormat(0.00123456789); // '1,23456789E-3' (The above examples assumes that the environment locale is set to en_US .) Get current Value To get the current value of this option, use the getFormatStyle() method. $this-&gt;plugin('numberFormat')-&gt;setFormatStyle(NumberFormatter::PERCENT); echo $this-&gt;plugin('numberFormat')-&gt;getFormatStyle(); // 3 (NumberFormatter::DEFAULT_STYLE) Default Value The default value of this option is NumberFormatter::DEFAULT_STYLE . Using Format Type The format type speficied the NumberFormatter formatting type to use. Constructor Usage echo $this-&gt;numberFormat(1234567.89, null, NumberFormatter::TYPE_INT32); // '1.234.567' Setter Usage $this-&gt;plugin('numberFormat')-&gt;setFormatType(NumberFormatter::TYPE_INT32); echo $this-&gt;numberFormat(1234567.89); // '1.234.567' (The above examples assumes that the environment locale is set to en_US .) Get current Value To get the current value of this option, use the getFormatType() method. $this-&gt;plugin('numberFormat')-&gt;setFormatType(NumberFormatter::DECIMAL); echo $this-&gt;plugin('numberFormat')-&gt;getFormatType(); // 1 (NumberFormatter::DECIMAL) Default Value The default value of this option is NumberFormatter::TYPE_DEFAULT . Using Locale Invoke Usage echo $this-&gt;numberFormat(1000, null, null, 'en_US'); // '1,000' Setter Usage $this-&gt;plugin('currencyFormat')-&gt;setLocale('en_US'); echo $this-&gt;numberFormat(1000); // '1,000' Locale Class Usage Locale::setDefault('en_US'); echo $this-&gt;numberFormat(1000); // '1,000' Get current Value To get the current value of this option, use the getLocale() method. $this-&gt;plugin('numberFormat')-&gt;setLocale('en_US'); echo $this-&gt;plugin('numberFormat')-&gt;getLocale(); // 'en_US' Default Value By default, if no locale is provided, NumberFormat will use the system locale provided by PHP's Locale::getDefault() . Using Decimals Sets the number of digits beyond the decimal point to display. Invoke Usage echo $this-&gt;numberFormat(1234, null, null, null, 5); // '1,234.00000' Setter Usage $this-&gt;plugin('currencyFormat')-&gt;setDecimals(5); echo $this-&gt;numberFormat(1234); // '1,234.00000' (The above examples assumes that the environment locale is set to en_US .) Get current Value To get the current value of this option, use the getDecimals() method. $this-&gt;plugin('numberFormat')-&gt;setDecimals(5); echo $this-&gt;plugin('numberFormat')-&gt;getDecimals(); // 5 Default Value The default value of this option is null that means the attributes for minimum and maximum fraction digits will not be set on the NumberFormatter . Using Text Attributes This option sets the text attributes of the formatting, like prefix and suffix for positive and negative numbers. See NumberFormatter text attribute constants . Invoke Usage echo $this-&gt;numberFormat( -1000, null, // Format style null, // Format type null, // Locale null, // Decimals [ NumberFormatter::NEGATIVE_PREFIX =&gt; '(minus) ', ] ); // '(minus) 1,000' Setter Usage $this-&gt;plugin('currencyFormat')-&gt;setTextAttributes([ NumberFormatter::NEGATIVE_PREFIX =&gt; '(minus) ', ]); echo $this-&gt;numberFormat(-1000); // '(minus) 1,000' (The above examples assumes that the environment locale is set to en_US .) Get current Value To get the current value of this option, use the getTextAttributes() method. $this-&gt;plugin('numberFormat')-&gt;setTextAttributes([ NumberFormatter::POSITIVE_PREFIX =&gt; '(plus) ', NumberFormatter::NEGATIVE_PREFIX =&gt; '(minus) ', ]); var_dump($this-&gt;plugin('numberFormat')-&gt;getTextAttributes()); // ['(plus) ', '(minus) '] Default Value The default value of this option is an empty array ;","title":"NumberFormat"},{"location":"view-helpers/number-format/#numberformat","text":"The NumberFormat view helper can be used to simplify rendering of locale-specific number and/or percentage strings . It acts as a wrapper for the NumberFormatter class within PHP's internationalization extension ( ext/intl ).","title":"NumberFormat"},{"location":"view-helpers/number-format/#basic-usage","text":"echo $this-&gt;numberFormat(1000); // '1,000' By default, if no locale is provided, NumberFormat will use the system locale provided by PHP's Locale class and the getDefault() method. (The above example assumes that the environment locale is set to en_US .)","title":"Basic Usage"},{"location":"view-helpers/number-format/#using-format-style","text":"This option sets the style of the formatting; one of the NumberFormatter format style constants . Constructor Usage // Example 1 echo $this-&gt;numberFormat(0.8, NumberFormatter::PERCENT); // '80%' // Example 2 echo $this-&gt;numberFormat(0.00123456789, NumberFormatter::SCIENTIFIC); // '1,23456789E-3' Setter Usage // Example 1 $this-&gt;plugin('numberFormat')-&gt;setFormatStyle(NumberFormatter::PERCENT); echo $this-&gt;numberFormat(0.8); // '80%' // Example 2 $this-&gt;plugin('numberFormat')-&gt;setFormatStyle(NumberFormatter::SCIENTIFIC); echo $this-&gt;numberFormat(0.00123456789); // '1,23456789E-3' (The above examples assumes that the environment locale is set to en_US .)","title":"Using Format Style"},{"location":"view-helpers/number-format/#using-format-type","text":"The format type speficied the NumberFormatter formatting type to use. Constructor Usage echo $this-&gt;numberFormat(1234567.89, null, NumberFormatter::TYPE_INT32); // '1.234.567' Setter Usage $this-&gt;plugin('numberFormat')-&gt;setFormatType(NumberFormatter::TYPE_INT32); echo $this-&gt;numberFormat(1234567.89); // '1.234.567' (The above examples assumes that the environment locale is set to en_US .)","title":"Using Format Type"},{"location":"view-helpers/number-format/#using-locale","text":"Invoke Usage echo $this-&gt;numberFormat(1000, null, null, 'en_US'); // '1,000' Setter Usage $this-&gt;plugin('currencyFormat')-&gt;setLocale('en_US'); echo $this-&gt;numberFormat(1000); // '1,000' Locale Class Usage Locale::setDefault('en_US'); echo $this-&gt;numberFormat(1000); // '1,000'","title":"Using Locale"},{"location":"view-helpers/number-format/#using-decimals","text":"Sets the number of digits beyond the decimal point to display. Invoke Usage echo $this-&gt;numberFormat(1234, null, null, null, 5); // '1,234.00000' Setter Usage $this-&gt;plugin('currencyFormat')-&gt;setDecimals(5); echo $this-&gt;numberFormat(1234); // '1,234.00000' (The above examples assumes that the environment locale is set to en_US .)","title":"Using Decimals"},{"location":"view-helpers/number-format/#using-text-attributes","text":"This option sets the text attributes of the formatting, like prefix and suffix for positive and negative numbers. See NumberFormatter text attribute constants . Invoke Usage echo $this-&gt;numberFormat( -1000, null, // Format style null, // Format type null, // Locale null, // Decimals [ NumberFormatter::NEGATIVE_PREFIX =&gt; '(minus) ', ] ); // '(minus) 1,000' Setter Usage $this-&gt;plugin('currencyFormat')-&gt;setTextAttributes([ NumberFormatter::NEGATIVE_PREFIX =&gt; '(minus) ', ]); echo $this-&gt;numberFormat(-1000); // '(minus) 1,000' (The above examples assumes that the environment locale is set to en_US .)","title":"Using Text Attributes"},{"location":"view-helpers/plural/","text":"Plural Most languages have specific rules for handling plurals. For instance, in English, we say \"0 cars\" and \"2 cars\" (plural) while we say \"1 car\" (singular). On the other hand, French uses the singular form for both 0 and 1 (\"0 voiture\" and \"1 voiture\") and the plural form otherwise (\"3 voitures\"). Therefore we often need to handle plural cases even without translation (mono-lingual application). The Plural helper was created for this. Plural Helper Does Not Translate If you need to handle both plural cases and translations, you must use the TranslatePlural helper ; Plural does not translate. Internally, the Plural helper uses the Laminas\\I18n\\Translator\\Plural\\Rule class to handle rules. Setup Defining plural rules is left to the developer. To help you with this process, here are some links with up-to-date plural rules for tons of languages: www.unicode.org developer.mozilla.org Define plural Rules As an example, you could add the following code in your Module class: // Get the ViewHelperPlugin Manager from the ServiceManager, so we can fetch the // Plural helper and add the plural rule for the application's language: $viewHelperManager = $serviceManager-&gt;get('ViewHelperManager'); $pluralHelper = $viewHelperManager-&gt;get('Plural'); Rule for French $pluralHelper-&gt;setPluralRule('nplurals=2; plural=(n==0 || n==1 ? 0 : 1)'); The string reads as follows: First, we specify how many plural forms we have. For French, only two (singular/plural). Next, we specify the rule. Here, if the count is 0 or 1, this is rule nÂ°0 (singular) while it's rule nÂ°1 otherwise. Rule for English As noted earlier, English considers \"1\" as singular and \"0/other\" as plural. Here is how that would be declared: $pluralHelper-&gt;setPluralRule('nplurals=2; plural=(n==1 ? 0 : 1)'); Basic Usage Now that we have defined the rule, we can use it in our view scripts. French echo $this-&gt;plural(['voiture', 'voitures'], 0); // 'voiture' echo $this-&gt;plural(['voiture', 'voitures'], 1); // 'voiture' echo $this-&gt;plural(['voiture', 'voitures'], 2); // 'voitures' English echo $this-&gt;plural(['car', 'cars'], 0); // 'cars' echo $this-&gt;plural(['car', 'cars'], 1); // 'car'","title":"Plural"},{"location":"view-helpers/plural/#plural","text":"Most languages have specific rules for handling plurals. For instance, in English, we say \"0 cars\" and \"2 cars\" (plural) while we say \"1 car\" (singular). On the other hand, French uses the singular form for both 0 and 1 (\"0 voiture\" and \"1 voiture\") and the plural form otherwise (\"3 voitures\"). Therefore we often need to handle plural cases even without translation (mono-lingual application). The Plural helper was created for this. Plural Helper Does Not Translate If you need to handle both plural cases and translations, you must use the TranslatePlural helper ; Plural does not translate. Internally, the Plural helper uses the Laminas\\I18n\\Translator\\Plural\\Rule class to handle rules.","title":"Plural"},{"location":"view-helpers/plural/#setup","text":"Defining plural rules is left to the developer. To help you with this process, here are some links with up-to-date plural rules for tons of languages: www.unicode.org developer.mozilla.org","title":"Setup"},{"location":"view-helpers/plural/#basic-usage","text":"Now that we have defined the rule, we can use it in our view scripts.","title":"Basic Usage"},{"location":"view-helpers/translate-plural/","text":"TranslatePlural The TranslatePlural view helper can be used to translate words which take into account numeric meanings . English, for example, has a singular definition of \"car\", for one car, and the plural definition, \"cars\", meaning zero \"cars\" or more than one car. Other languages like Russian or Polish have more plurals with different rules. The helper acts as a wrapper for the Laminas\\I18n\\Translator\\Translator class . Setup Before using the TranslatePlural view helper, you must have first created a Translator object and have attached it to the view helper. If you use the Laminas\\View\\HelperPluginManager to invoke the view helper, this will be done automatically for you. Basic Usage To use this view helper, you must define the following parameters: $singular : The message to use for singular values. $plural : The message to use for plural values. $number : The number to evaluate in order to determine which number to use. echo $this-&gt;translatePlural('car', 'cars', 1); // 'Auto' echo $this-&gt;translatePlural('car', 'cars', 4); // 'Autos' (The above example assumes that the environment locale is set to de_DE .) Using Text Domain The text domain defines the domain of the translation. Invoke Usage echo $this-&gt;translatePlural('monitor', 'monitors', 1, 'customDomain'); // 'Bildschirm' Setter Usage $this-&gt;plugin('currencyFormat')-&gt;setTranslatorTextDomain('customDomain'); echo $this-&gt;translatePlural('monitor', 'monitors', 1); // 'Bildschirm' (The above example assumes that the environment locale is set to de_DE .) Get current Value To get the current value of this option, use the getTranslatorTextDomain() method. $this-&gt;plugin('translatePlural')-&gt;setTranslatorTextDomain('customDomain'); echo $this-&gt;plugin('translatePlural')-&gt;getTranslatorTextDomain(); // 'customDomain' Default Value The default value of this option is default like defined in Laminas\\I18n\\Translator\\TranslatorInterface . Using Locale The locale to which the message should be translated. echo $this-&gt;translatePlural('car', 'cars', 1, 'default', 'de_DE'); // 'Auto' echo $this-&gt;translatePlural('car', 'cars', 4, 'default', 'de_DE'); // 'Autos' Default Value By default, if no locale is provided, TranslatePlural will use the system locale provided by PHP's Locale::getDefault() .","title":"TranslatePlural"},{"location":"view-helpers/translate-plural/#translateplural","text":"The TranslatePlural view helper can be used to translate words which take into account numeric meanings . English, for example, has a singular definition of \"car\", for one car, and the plural definition, \"cars\", meaning zero \"cars\" or more than one car. Other languages like Russian or Polish have more plurals with different rules. The helper acts as a wrapper for the Laminas\\I18n\\Translator\\Translator class .","title":"TranslatePlural"},{"location":"view-helpers/translate-plural/#setup","text":"Before using the TranslatePlural view helper, you must have first created a Translator object and have attached it to the view helper. If you use the Laminas\\View\\HelperPluginManager to invoke the view helper, this will be done automatically for you.","title":"Setup"},{"location":"view-helpers/translate-plural/#basic-usage","text":"To use this view helper, you must define the following parameters: $singular : The message to use for singular values. $plural : The message to use for plural values. $number : The number to evaluate in order to determine which number to use. echo $this-&gt;translatePlural('car', 'cars', 1); // 'Auto' echo $this-&gt;translatePlural('car', 'cars', 4); // 'Autos' (The above example assumes that the environment locale is set to de_DE .)","title":"Basic Usage"},{"location":"view-helpers/translate-plural/#using-text-domain","text":"The text domain defines the domain of the translation. Invoke Usage echo $this-&gt;translatePlural('monitor', 'monitors', 1, 'customDomain'); // 'Bildschirm' Setter Usage $this-&gt;plugin('currencyFormat')-&gt;setTranslatorTextDomain('customDomain'); echo $this-&gt;translatePlural('monitor', 'monitors', 1); // 'Bildschirm' (The above example assumes that the environment locale is set to de_DE .)","title":"Using Text Domain"},{"location":"view-helpers/translate-plural/#using-locale","text":"The locale to which the message should be translated. echo $this-&gt;translatePlural('car', 'cars', 1, 'default', 'de_DE'); // 'Auto' echo $this-&gt;translatePlural('car', 'cars', 4, 'default', 'de_DE'); // 'Autos'","title":"Using Locale"},{"location":"view-helpers/translate/","text":"Translate The Translate view helper can be used to translate content . It acts as a wrapper for the Laminas\\I18n\\Translator\\Translator class . Setup Before using the Translate view helper, you must have first created a Translator object and have attached it to the view helper. If you use the Laminas\\View\\HelperPluginManager to invoke the view helper, this will be done automatically for you. Basic Usage echo $this-&gt;translate('Some translated text.'); // Etwas Ã¼bersetzter Text (The above example assumes that the environment locale is set to de_DE .) Using Text Domain The text domain defines the domain of the translation. Invoke Usage echo $this-&gt;translate('monitor', 'customDomain'); // 'Monitor' Setter Usage $this-&gt;plugin('currencyFormat')-&gt;setTranslatorTextDomain('customDomain'); echo $this-&gt;translate('monitor'); // 'Monitor' (The above example assumes that the environment locale is set to de_DE .) Get current Value To get the current value of this option, use the getTranslatorTextDomain() method. $this-&gt;plugin('translatePlural')-&gt;setTranslatorTextDomain('customDomain'); echo $this-&gt;plugin('translatePlural')-&gt;getTranslatorTextDomain(); // 'customDomain' Default Value The default value of this option is default like defined in Laminas\\I18n\\Translator\\TranslatorInterface . Using Locale The locale to which the message should be translated. echo $this-&gt;translate('car', 'default', 'de_DE'); // 'Auto' Default Value By default, if no locale is provided, TranslatePlural will use the system locale provided by PHP's Locale::getDefault() .","title":"Translate"},{"location":"view-helpers/translate/#translate","text":"The Translate view helper can be used to translate content . It acts as a wrapper for the Laminas\\I18n\\Translator\\Translator class .","title":"Translate"},{"location":"view-helpers/translate/#setup","text":"Before using the Translate view helper, you must have first created a Translator object and have attached it to the view helper. If you use the Laminas\\View\\HelperPluginManager to invoke the view helper, this will be done automatically for you.","title":"Setup"},{"location":"view-helpers/translate/#basic-usage","text":"echo $this-&gt;translate('Some translated text.'); // Etwas Ã¼bersetzter Text (The above example assumes that the environment locale is set to de_DE .)","title":"Basic Usage"},{"location":"view-helpers/translate/#using-text-domain","text":"The text domain defines the domain of the translation. Invoke Usage echo $this-&gt;translate('monitor', 'customDomain'); // 'Monitor' Setter Usage $this-&gt;plugin('currencyFormat')-&gt;setTranslatorTextDomain('customDomain'); echo $this-&gt;translate('monitor'); // 'Monitor' (The above example assumes that the environment locale is set to de_DE .)","title":"Using Text Domain"},{"location":"view-helpers/translate/#using-locale","text":"The locale to which the message should be translated. echo $this-&gt;translate('car', 'default', 'de_DE'); // 'Auto'","title":"Using Locale"}]}